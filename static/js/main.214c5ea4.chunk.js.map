{"version":3,"sources":["components/ErrorPage.js","components/NavSidebar.js","components/ProfilePicture.js","components/ProfileDetails.js","components/UserProfile.js","components/AppHeader.js","components/contexts/CharacterState.js","components/SheetHeader.js","components/CharacterDetailsTable.js","components/CharacterTypeTable.js","components/Level.js","components/XP.js","components/BasicAttributesTable.js","components/Damage.js","components/Armour.js","components/Funds.js","components/HP.js","components/ExtraAttributes.js","components/AbilitiesTable.js","components/BondsTable.js","components/GearTable.js","components/ClassFeaturesTable.js","components/CharacterSheet.js","components/App.js","services/firebase.js","index.js"],"names":["ErrorPage","NavSidebar","to","ProfilePicture","props","className","id","src","currentUser","photoURL","alt","ProfileDetails","displayName","email","UserProfile","useState","AppHeader","CharacterState","React","createContext","SheetHeader","useContext","character","charaName","owner","CharacterDetailsTable","setCharacter","style","htmlFor","placeholder","value","backstory","name","onChange","event","target","look","CharacterTypeTable","dwc","dwClass","alig","alignment","race","tabIndex","disabled","hidden","dwClasses","map","data","key","races","readOnly","classDetails","raceAttributes","alignments","alignmentAttributes","Level","type","min","level","XP","xp","parseInt","BasicAttributesTable","Damage","damage","Armour","armour","Funds","funds","HP","colSpan","hp","abilities","baseHp","find","x","category","score","ExtraAttributes","AbilitiesTable","updateAbilityScore","index","e","newAbilities","updateAbilityAffliction","affliction","abilityModifier","abilityScore","abilityAffliction","baseModifier","indexOf","modifier","max","ab","abilityAfflictions","BondsTable","updateBond","newBonds","bonds","bond","onClick","addBondsRow","length","splice","alert","deleteBondRow","GearTable","updateItem","newItems","gear","item","updateItemWeight","weight","addItemRow","deleteItemRow","reduce","totalLoad","str","baseLoad","maxLoad","ClassFeaturesTable","updateFeatureCheckbox","newFeatures","classFeatures","checkbox","checked","updateFeature","feature","addFeatureRow","deleteFeatureRow","CharacterSheet","campaign","useParams","console","log","useEffect","Provider","App","path","children","component","firebase","initializeApp","apiKey","process","authDomain","projectId","databaseURL","storageBucket","messagingSenderId","appId","measurementId","auth","provider","firestore","GoogleAuthProvider","SignInWithGoogle","signInWithPopup","setCustomParameters","prompt","AuthContext","Index","unsubscribeFromAuth","state","this","FirestoreService","onAuthStateChanged","user","setState","signOut","Component","rootElement","document","getElementById","ReactDOM","render"],"mappings":"i1PAQeA,MANf,WACE,OACI,wDCOSC,MARf,WACE,OAAY,gCACR,cAAC,IAAD,CAAMC,GAAG,IAAT,mBACA,cAAC,IAAD,CAAMA,GAAG,SAAT,uBACA,cAAC,IAAD,CAAMA,GAAG,QAAT,2B,OCGSC,MARf,SAAwBC,GACtB,OAAQ,qBACNC,UAAU,cACVC,GAAG,cACHC,IAAKH,EAAMI,YAAYC,SACvBC,IAAKN,EAAMI,YAAYC,YCGZE,MARf,SAAwBP,GACpB,OAAQ,sBAAKC,UAAU,cAAf,UACR,iDACA,qBAAKC,GAAG,WAAR,SAAoBF,EAAMI,YAAYI,cACtC,qBAAKN,GAAG,YAAR,SAAqBF,EAAMI,YAAYK,YCM5BC,MARf,SAAqBV,GAAQ,IAAD,EACEW,oBAAS,GADX,mBAE1B,OAF0B,UAElB,gCACN,cAAC,EAAD,CAAgBP,YAAaJ,EAAMI,cACnC,cAAC,EAAD,CAAgBA,YAAaJ,EAAMI,kBCKxBQ,MAXf,WACE,OACI,gCACE,+DACA,4BACE,+DCHKC,EAFQC,IAAMC,cAAc,CAAC,GAAI,eCWjCC,MAVf,WAAuB,MAEaC,qBAAWJ,GAFxB,mBAEdK,EAFc,KAIrB,OAJqB,KAKnB,8BACE,8CAAiBA,EAAUC,UAA3B,KAAwCD,EAAUE,MAAlD,U,OCqBSC,MA3Bf,WAAiC,MAGGJ,qBAAWJ,GAHd,mBAGxBK,EAHwB,KAGbI,EAHa,KAK/B,OAAQ,uBAAOC,MAAO,CAAC,MAAU,QAASrB,GAAG,iBAArC,SACN,kCACE,+BACE,oBAAIqB,MAAO,CAAC,MAAU,OAAtB,SACE,uBAAOC,QAAQ,YAAf,yBAEF,6BACE,0BAAUC,YAAY,4FAA4FC,MAAOR,EAAUS,UAAWC,KAAK,YAAYC,SAAU,SAAAC,GAAK,OAAIR,GAAa,SAAAJ,GAAS,kCAASA,GAAT,IAAmBS,UAAWG,EAAMC,OAAOL,mBAGvP,+BACE,oBAAIH,MAAO,CAAC,MAAU,OAAtB,SACE,uBAAOC,QAAQ,OAAf,oBAEF,6BACE,0BAAUC,YAAY,4CAA4CG,KAAK,OAAOF,MAAOR,EAAUc,KAAMH,SAAU,SAAAC,GAAK,OAAIR,GAAa,SAAAJ,GAAS,kCAASA,GAAT,IAAmBc,KAAMF,EAAMC,OAAOL,yB,gCCsF/KO,MAtGf,WAA8B,MAGMhB,qBAAWJ,GAHjB,mBAGrBK,EAHqB,KAGVI,EAHU,KAItBY,EAAMhB,EAAUiB,QAChBC,EAAOlB,EAAUmB,UACjBC,EAAOpB,EAAUoB,KAkBvB,OACA,uBAAOf,MAAO,CAAC,MAAU,QAASrB,GAAG,sBAArC,SACE,kCACE,+BACE,6BACE,uBAAOqB,MAAO,CAAC,MAAU,OAAQC,QAAQ,UAAzC,qBAEF,oBAAID,MAAO,CAAC,MAAU,OAAtB,SACE,yBACEgB,UAAW,EACXb,MAAOR,EAAUiB,SAAW,OAC5BN,SAAU,SAAAC,GACRR,GAAa,SAAAJ,GAAS,kCAASA,GAAT,IAAmBiB,QAASL,EAAMC,OAAOL,WAC/DJ,GAAa,SAAAJ,GAAS,kCAASA,GAAT,IAAmBmB,UAAW,aALxD,UAME,wBAAQG,UAAQ,EAACd,MAAM,OAAOe,QAAM,IAElCC,IAAUC,KAAI,SAACC,EAAMC,GACnB,OACA,wBAAQnB,MAAOkB,EAAf,SACGA,GADuBC,WAOlC,oBAAItB,MAAO,CAAC,MAAU,YAExB,+BACE,6BACE,uBAAOC,QAAQ,OAAf,oBAEF,6BACE,yBACEe,UAAW,EACXb,MAAOR,EAAUoB,MAAQ,OACzBT,SAAU,SAAAC,GAAK,OAAIR,GAAa,SAAAJ,GAAS,kCAASA,GAAT,IAAmBoB,KAAMR,EAAMC,OAAOL,YAHjF,UAIE,wBAAQc,UAAQ,EAACd,MAAM,OAAOe,QAAM,IAElCK,IAAMH,KAAI,SAACC,EAAMC,GACf,OACA,wBAAQnB,MAAOkB,EAAf,SACGA,GADuBC,WAOlC,6BACE,0BAAU5C,UAAU,OAAO8C,SAAS,WAAWrB,MA/DjDR,EAAUiB,SAAWjB,EAAUoB,KACzBU,IAAcd,GAAKe,eAAgBX,GAEnC,UA+DR,+BACE,6BACE,uBAAOd,QAAQ,YAAf,yBAEF,6BACE,yBACEe,UAAW,EACXb,MAAOR,EAAUmB,WAAa,OAC9BR,SAAU,SAAAC,GAAK,OAAIR,GAAa,SAAAJ,GAAS,kCAASA,GAAT,IAAmBmB,UAAWP,EAAMC,OAAOL,YAHtF,UAIE,wBAAQc,UAAQ,EAACd,MAAM,OAAOe,QAAM,IAElCvB,EAAUiB,SAAWe,IAAYhB,GAAKS,KAAI,SAACC,EAAMC,GACjD,OACA,wBAAQnB,MAAOkB,EAAf,SACGA,GADuBC,WAMhC,6BACE,0BAAU5C,UAAU,OAAO8C,SAAS,WAAWrB,MA9EjDR,EAAUiB,SAAWjB,EAAUmB,UACzBW,IAAcd,GAAKiB,oBAAqBf,GAExC,gBCJCgB,MApBf,WAAiB,MAGmBnC,qBAAWJ,GAH9B,mBAGRK,EAHQ,KAGGI,EAHH,KAKf,OACE,gCACE,gCACE,+BACE,6BACE,uBAAOE,QAAQ,QAAf,qBAEF,6BACE,uBAAO6B,KAAK,SAASC,IAAK,EAAGrD,UAAU,aAAa2B,KAAK,QAAQF,MAAOR,EAAUqC,OAAS,GAAI1B,SAAU,SAAAC,GAAK,OAAIR,GAAa,SAAAJ,GAAS,kCAASA,GAAT,IAAmBqC,MAAOzB,EAAMC,OAAOL,wBCmB5K8B,MAhCf,WAAc,MAGsBvC,qBAAWJ,GAHjC,mBAGLK,EAHK,KAGMI,EAHN,KAcZ,OACE,gCACE,gCACE,+BACE,6BACE,uBAAOE,QAAQ,KAAf,kBAEF,6BACE,uBAAO6B,KAAK,SAASC,IAAK,EAAGrD,UAAU,aAAa2B,KAAK,KAAKF,MAAOR,EAAUuC,IAAM,GAAI5B,SAAU,SAAAC,GAAK,OAAIR,GAAa,SAAAJ,GAAS,kCAASA,GAAT,IAAmBuC,GAAI3B,EAAMC,OAAOL,gBAExK,6BACE,uBAAO2B,KAAK,OAAOpD,UAAU,kBAAkB2B,KAAK,QAAQmB,SAAS,WAAWrB,MAlBpFR,EAAUqC,MACJ,MAAQG,SAASxC,EAAUqC,MAAM,IAAM,GAEvC,eCACI,MATf,WAEE,OACE,sBAAK1D,UAAU,SAAf,UACI,8BAAK,cAAC,EAAD,MACL,8BAAK,cAAC,EAAD,UC4BE2D,MAjCf,WAAkB,MAGI3C,qBAAWJ,GAAxBK,EAHS,oBAIVgB,EAAMhB,EAAUiB,QAUtB,OACE,wBAAOjC,GAAG,SAAV,UACE,gCACE,6BACE,6BACE,uBAAOsB,QAAQ,SAAf,0BAIN,gCACE,6BACE,6BACE,uBAAO6B,KAAK,OAAOpD,UAAU,kBAAkB8C,SAAS,WAAWrB,MAnBvER,EAAUiB,QACJa,IAAcd,GAAK2B,OAEnB,eCcCC,MAzBf,WAAkB,MAGkB7C,qBAAWJ,GAH7B,mBAGTK,EAHS,KAGEI,EAHF,KAKhB,OACE,wBAAOpB,GAAG,SAAV,UACE,gCACE,6BACE,6BACE,uBAAOsB,QAAQ,SAAf,0BAIN,gCACE,6BACE,6BACE,uBAAO6B,KAAK,SAASC,IAAK,EAAGrD,UAAU,aAAa2B,KAAK,SAASF,MAAOR,EAAU6C,QAAU,GAAIlC,SAAU,SAAAC,GAAK,OAAIR,GAAa,SAAAJ,GAAS,kCAASA,GAAT,IAAmB6C,OAAQjC,EAAMC,OAAOL,wBCS/KsC,MA1Bf,WAAiB,MAGmB/C,qBAAWJ,GAH9B,mBAGRK,EAHQ,KAGGI,EAHH,KAKf,OACE,wBAAOpB,GAAG,QAAV,UACE,gCACE,6BACE,6BACE,uBAAOsB,QAAQ,QAAf,yBAIN,gCACE,6BACE,6BACE,uBAAO6B,KAAK,SAASpD,UAAU,aAAa2B,KAAK,QAC/C0B,IAAK,EAAGpD,GAAG,QAAQwB,MAAOR,EAAU+C,OAAS,GAAIpC,SAAU,SAAAC,GAAK,OAAIR,GAAa,SAAAJ,GAAS,kCAASA,GAAT,IAAmB+C,MAAOnC,EAAMC,OAAOL,wBCoBhIwC,MArCf,WAAc,MAGsBjD,qBAAWJ,GAHjC,mBAGLK,EAHK,KAGMI,EAHN,KAKNY,EAAMhB,EAAUiB,QAStB,OACE,wBAAOjC,GAAG,KAAV,UACE,gCACE,6BACE,oBAAIiE,QAAS,EAAb,SACE,uBAAO3C,QAAQ,KAAf,sBAIN,gCACE,+BACE,6BACE,uBAAO6B,KAAK,SAASC,IAAK,EAAGrD,UAAU,aAAa2B,KAAK,KAAKF,MAAOR,EAAUkD,IAAM,GAAIvC,SAAU,SAAAC,GAAK,OAAIR,GAAa,SAAAJ,GAAS,kCAASA,GAAT,IAAmBkD,GAAItC,EAAMC,OAAOL,gBAExK,6BACE,uBAAO2B,KAAK,OAAOpD,UAAU,kBAAkB2B,KAAK,QAAQmB,SAAS,WAAWrB,MAtBpFR,EAAUiB,SAAWjB,EAAUmD,UACzB,MAAQrB,IAAcd,GAAKoC,OAASZ,SAASxC,EAAUmD,UAAUE,MAAK,SAAAC,GAAC,MAAmB,QAAfA,EAAEC,YAAoBC,MAAO,KAExG,gBCGCC,MAXf,WAEE,OACA,sBAAK1E,UAAU,SAAf,UACE,8BAAK,cAAC,EAAD,MACL,8BAAK,cAAC,EAAD,MACL,8BAAK,cAAC,EAAD,MACL,8BAAK,cAAC,EAAD,U,gBCiIM2E,MA1If,WAA0B,MAGU3D,qBAAWJ,GAHrB,mBAGjBK,EAHiB,KAGNI,EAHM,KAKlBuD,EAAqB,SAAAC,GAAK,OAAI,SAAAC,GAClC,IAAIC,EAAY,YAAO9D,EAAUmD,WACjCW,EAAaF,GAAb,2BAA0B5D,EAAUmD,UAAUS,IAA9C,IAAsDJ,MAAOK,EAAEhD,OAAOL,QACtEJ,GAAa,SAAAJ,GAAS,kCAASA,GAAT,IAAoBmD,UAAWW,SAGjDC,EAA0B,SAAAH,GAAK,OAAI,SAAAC,GACvC,IAAIC,EAAY,YAAO9D,EAAUmD,WACjCW,EAAaF,GAAb,2BAA0B5D,EAAUmD,UAAUS,IAA9C,IAAsDI,WAAYH,EAAEhD,OAAOL,QAC3EJ,GAAa,SAAAJ,GAAS,kCAASA,GAAT,IAAoBmD,UAAWW,SAGjDG,EAAkB,SAACC,EAAcC,GAErC,GAAID,GAAgBC,EAAmB,CACvC,IAAIC,EAGJF,EAAe1B,SAAS0B,EAAa,IAEjC,CAAC,EAAG,EAAG,GAAGG,QAAQH,IAAiB,EACrCE,GAAgB,EACP,CAAC,EAAG,GAAGC,QAAQH,IAAiB,EACzCE,GAAgB,EACP,CAAC,EAAG,EAAG,GAAGC,QAAQH,IAAiB,EAC5CE,GAAgB,EACP,CAAC,EAAG,GAAI,GAAI,IAAIC,QAAQH,IAAiB,EAClDE,EAAe,EACN,CAAC,GAAI,GAAI,IAAIC,QAAQH,IAAiB,EAC/CE,EAAe,EACN,CAAC,GAAI,IAAIC,QAAQH,IAAiB,EAC3CE,EAAe,EACW,KAAjBF,IACTE,EAAe,GAUjB,IAAIE,EAAYF,GANU,gBAAtBD,EACU,EAEA,GAKd,OAAIG,EAAW,EACN,IAAMA,EAELA,EAGV,MAAQ,IAIV,OACG,wBAAOjE,MAAO,CAAC,MAAQ,QAASrB,GAAG,iBAAnC,UACE,gCACE,6BAEGgB,EAAUmD,WAAanD,EAAUmD,UAAU1B,KAAI,SAAC0B,EAAWS,GAC3D,OACE,6BACE,uBACEtD,QAAS6C,EAAUI,SACnB/C,MAAO2C,EAAUI,SAFnB,SAGGJ,EAAUI,YAJNK,UAWhB,kCACE,6BAEG5D,EAAUmD,WAAanD,EAAUmD,UAAU1B,KAAI,SAAC0B,EAAWS,GAC3D,OACE,6BACE,uBACEzB,KAAK,SACLC,IAAK,EAAGmC,IAAK,GACbxF,UAAU,UACVyB,MAAO2C,EAAUK,MACjB7C,SAAUgD,EAAmBC,MANxBA,QAWd,6BAEG5D,EAAUmD,WAAanD,EAAUmD,UAAU1B,KAAI,SAAC0B,EAAWS,GAC3D,OACE,6BACE,uBACEzB,KAAK,OACLpD,UAAU,iBACVyB,MAAOyD,EAAgBd,EAAUK,MAAOL,EAAUa,YAClDnC,UAAQ,KALH+B,QAUd,6BAEG5D,EAAUmD,WAAanD,EAAUmD,UAAU1B,KAAI,SAAC0B,EAAUS,GAC1D,IAAMY,EAAKrB,EAAUI,SACrB,OACE,6BACE,yBACElC,UAAW,EACXtC,UAAU,oBACVyB,MAAO2C,EAAUa,YAAc,OAC/BrD,SAAUoD,EAAwBH,GAJpC,UAKE,wBAAQtC,UAAQ,EAACd,MAAM,OAAOe,QAAM,IAEhCkD,IAAoBD,GAAI/C,KAAI,SAACC,EAAMC,GACjC,OACA,wBAAQnB,MAAOkB,EAAf,SACGA,GADuBC,UAV3BiC,eCxCRc,MA1Ef,WAAsB,MAGc3E,qBAAWJ,GAHzB,mBAGbK,EAHa,KAGFI,EAHE,KAMduE,EAAa,SAAAf,GAAK,OAAI,SAAAC,GAC1B,IAAIe,EAAQ,YAAO5E,EAAU6E,OAC7BD,EAAShB,GAAT,2BAAsB5D,EAAU6E,MAAMjB,IAAtC,IAA8CkB,KAAMjB,EAAEhD,OAAOL,QAC7DJ,GAAa,SAAAJ,GAAS,kCAASA,GAAT,IAAoB6E,MAAOD,SAoBnD,OACE,wBAAOvE,MAAO,CAAC,MAAU,QAASrB,GAAG,aAArC,UACE,gCACE,+BACE,oBAAIqB,MAAO,CAAC,MAAU,QAAtB,SACE,4CAEF,6BACE,wBACE8B,KAAK,SACLpD,UAAU,SACVgG,QAAS,kBAhBD,WAClB,IAAMH,EAAQ,sBAAO5E,EAAU6E,OAAjB,CAAwB,CAACC,KAAM,MAC7C1E,GAAa,SAAAJ,GAAS,kCAASA,GAAT,IAAoB6E,MAAOD,OAcxBI,IAHjB,sBASN,gCAEGhF,EAAU6E,OAAS7E,EAAU6E,MAAMpD,KAAI,SAACoD,EAAMjB,GAC9C,OACE,+BACI,6BACE,0BACErD,YAAY,qBACZC,MAAOqE,EAAMC,KACbpE,KAAM,OAASkD,EACfjD,SAAUgE,EAAWf,OAGzB,6BACE,wBACEzB,KAAK,SACLpD,UAAU,YACVgG,QAAS,kBAlDJ,SAAAnB,GACpB,IAAMgB,EAAQ,YAAO5E,EAAU6E,OACA,IAA3B7E,EAAU6E,MAAMI,QAClBL,EAASM,OAAOtB,EAAO,GACvBxD,GAAa,SAAAJ,GAAS,kCAASA,GAAT,IAAoB6E,MAAOD,QAEjDO,MAAM,2BA4CsBC,CAAcxB,UAb5BA,QAmBd,8BCiFSyB,MArJf,WAAqB,MAGetF,qBAAWJ,GAH1B,mBAGZK,EAHY,KAGDI,EAHC,KAIbY,EAAMhB,EAAUiB,QAoDhBqE,EAAa,SAAA1B,GAAK,OAAI,SAAAC,GAC1B,IAAI0B,EAAQ,YAAOvF,EAAUwF,MAC7BD,EAAS3B,GAAT,2BAAsB5D,EAAUwF,KAAK5B,IAArC,IAA6C6B,KAAM5B,EAAEhD,OAAOL,QAC5DJ,GAAa,SAAAJ,GAAS,kCAASA,GAAT,IAAoBwF,KAAMD,SAG5CG,EAAmB,SAAA9B,GAAK,OAAI,SAAAC,GAChC,IAAI0B,EAAQ,YAAOvF,EAAUwF,MAC7BD,EAAS3B,GAAT,2BAAsB5D,EAAUwF,KAAK5B,IAArC,IAA6C+B,OAAQ9B,EAAEhD,OAAOL,QAC9DJ,GAAa,SAAAJ,GAAS,kCAASA,GAAT,IAAoBwF,KAAMD,SAqBlD,OACE,wBAAOlF,MAAO,CAAC,MAAQ,QAASrB,GAAG,YAAnC,UACE,kCACE,6BACE,oBAAIiE,QAAS,EAAb,SAAgB,6CAElB,+BACE,oBAAI5C,MAAO,CAAC,MAAQ,QAApB,SAA6B,2CAC7B,oBAAI4C,QAAS,EAAb,SAAgB,6CAChB,6BACE,wBACEd,KAAK,SACLpD,UAAU,SACVgG,QAAS,kBAnBF,WACjB,IAAMQ,EAAQ,sBAAOvF,EAAUwF,MAAjB,CAAuB,CAACC,KAAM,GAAIE,OAAQ,MACxDvF,GAAa,SAAAJ,GAAS,kCAASA,GAAT,IAAoBwF,KAAMD,OAiBvBK,IAHjB,uBASN,gCAEG5F,EAAUwF,MAAQxF,EAAUwF,KAAK/D,KAAI,SAAC+D,EAAK5B,GAC3C,OACE,+BACI,6BACE,0BACErD,YAAY,sCACZC,MAAOgF,EAAKC,KACZ9E,SAAU2E,EAAW1B,OAEzB,oBAAIX,QAAS,EAAb,SACE,uBACEd,KAAK,SACLC,IAAK,EACL5B,MAAOgF,EAAKG,OACZhF,SAAU+E,EAAiB9B,OAE/B,6BACE,wBACEzB,KAAK,SACLpD,UAAU,YACVgG,QAAS,kBA1DJ,SAAAnB,GACpB,IAAM2B,EAAQ,YAAOvF,EAAUwF,MACD,IAA1BxF,EAAUwF,KAAKP,QACjBM,EAASL,OAAOtB,EAAO,GACvBxD,GAAa,SAAAJ,GAAS,kCAASA,GAAT,IAAoBwF,KAAMD,QAEhDJ,MAAM,2BAoDsBU,CAAcjC,UAlB5BA,QAwBd,gCACE,+BACE,6BAAI,uBAAOtD,QAAQ,OAAf,oBACJ,6BACE,uBAAO6B,KAAK,SAASpD,UAAU,kBAAkB8C,UAAQ,EAACrB,MAjI9DR,EAAUwF,KACJxF,EAAUwF,KAAKM,QAAO,SAACC,EAAUrE,GAAX,OAAoBqE,EAAYvD,SAAUd,EAAKiE,QAAU,EAAG,MAAK,GAEvF,OAgIJ,6BACE,uBAAOxD,KAAK,OAAOpD,UAAU,kBAAkB8C,SAAS,WAAWrB,MA5H7D,WACd,IAAIwF,EAAMhG,EAAUmD,UAAUE,MAAK,SAAAC,GAAC,MAAmB,QAAfA,EAAEC,YAC1C,GAAIvD,EAAUiB,SAAW+E,EAAIxC,OAASwC,EAAIhC,WAAY,CACpD,IAAII,EACAD,EAAoB6B,EAAIhC,WACxBE,EAAe1B,SAASwD,EAAIxC,MAAM,IAGlC,CAAC,EAAG,EAAG,GAAGa,QAAQH,IAAiB,EACrCE,GAAgB,EACP,CAAC,EAAG,GAAGC,QAAQH,IAAiB,EACzCE,GAAgB,EACP,CAAC,EAAG,EAAG,GAAGC,QAAQH,IAAiB,EAC5CE,GAAgB,EACP,CAAC,EAAG,GAAI,GAAI,IAAIC,QAAQH,IAAiB,EAClDE,EAAe,EACN,CAAC,GAAI,GAAI,IAAIC,QAAQH,IAAiB,EAC/CE,EAAe,EACN,CAAC,GAAI,IAAIC,QAAQH,IAAiB,EAC3CE,EAAe,EACW,KAAjBF,IACTE,EAAe,GAUjB,IAAIE,EAAYF,GANU,gBAAtBD,EACU,EAEA,GAKd,MAAQ,MAAQrC,IAAcd,GAAKiF,SAAW3B,GAE9C,MAAQ,GAyFwE4B,OAE5E,gCCpDKC,MA3Ff,WAA8B,MAGMpG,qBAAWJ,GAHjB,mBAGrBK,EAHqB,KAGVI,EAHU,KAMtBgG,EAAwB,SAAAxC,GAAK,OAAI,SAAAC,GACrC,IAAIwC,EAAW,YAAOrG,EAAUsG,eAChCD,EAAYzC,GAAZ,2BAAyB5D,EAAUsG,cAAc1C,IAAjD,IAAyD2C,SAAU1C,EAAEhD,OAAO2F,UAC5EpG,GAAa,SAAAJ,GAAS,kCAASA,GAAT,IAAoBsG,cAAeD,SAGrDI,EAAgB,SAAA7C,GAAK,OAAI,SAAAC,GAC7B,IAAIwC,EAAW,YAAOrG,EAAUsG,eAChCD,EAAYzC,GAAZ,2BAAyB5D,EAAUsG,cAAc1C,IAAjD,IAAyD8C,QAAS7C,EAAEhD,OAAOL,QAC3EJ,GAAa,SAAAJ,GAAS,kCAASA,GAAT,IAAoBsG,cAAeD,SAoB3D,OACE,wBAAOhG,MAAO,CACV,MAAU,QACTrB,GAAG,qBAFR,UAGE,gCACE,+BACE,oBAAIiE,QAAS,EAAG5C,MAAO,CACnB,MAAU,QADd,SAGE,qDAEF,6BACE,wBACE8B,KAAK,SACLpD,UAAU,SACVgG,QAAS,kBApBC,WACpB,IAAMsB,EAAW,sBAAOrG,EAAUsG,eAAjB,CAAgC,CAACI,QAAS,GAAIH,UAAU,KACzEnG,GAAa,SAAAJ,GAAS,kCAASA,GAAT,IAAoBsG,cAAeD,OAkBhCM,IAHjB,sBASN,gCAEK3G,EAAUsG,eAAiBtG,EAAUsG,cAAc7E,KAAI,SAAC6E,EAAc1C,GACtE,OACE,+BACE,6BACE,uBACEzB,KAAK,WACLpD,UAAU,WACV2B,KAAM,uBAAyBkD,EAC/B4C,UAAWF,EAAcC,SACzB5F,SAAUyF,EAAsBxC,OAElC,6BACE,0BACErD,YAAY,kHACZC,MAAO8F,EAAcI,QACrBhG,KAAM,eAAiBkD,EACvBjD,SAAU8F,EAAc7C,OAE5B,6BACE,wBACEzB,KAAK,SACLpD,UAAU,YACVgG,QAAS,kBA7DH,SAAAnB,GACvB,IAAMyC,EAAW,YAAOrG,EAAUsG,eACK,IAAnCtG,EAAUsG,cAAcrB,QAC1BoB,EAAYnB,OAAOtB,EAAO,GAC1BxD,GAAa,SAAAJ,GAAS,kCAASA,GAAT,IAAoBsG,cAAeD,QAEzDlB,MAAM,2BAuDwByB,CAAiBhD,UApB/BA,QA0BhB,8BCASiD,MA3Ef,WAA0B,IAGlBC,EAAaC,cAAbD,SAENE,QAAQC,IAAI,YAAYH,GALA,MAQUrH,mBAAS,IARnB,mBAQjBO,EARiB,KAQNI,EARM,KAoDxB,OAzCA8G,qBAAU,WACR9G,EAAa,CACPF,MAAO,kBACPD,UAAW,MACXa,KAAM,WACNL,UAAW,gBACXQ,QAAS,UACTG,KAAM,MACND,UAAW,OACXkB,MAAO,EACPE,GAAI,EACJY,UAAW,CACT,CAACI,SAAU,MAAOC,MAAO,EAAGQ,WAAY,QACxC,CAACT,SAAU,MAAOC,MAAO,EAAGQ,WAAY,eACxC,CAACT,SAAU,MAAOC,MAAO,EAAGQ,WAAY,eACxC,CAACT,SAAU,MAAOC,MAAO,EAAGQ,WAAY,eACxC,CAACT,SAAU,MAAOC,MAAO,EAAGQ,WAAY,eACxC,CAACT,SAAU,MAAOC,MAAO,EAAGQ,WAAY,gBAE1CnB,OAAQ,EACRK,GAAG,EACHH,MAAO,GACP8B,MAAO,CACL,CAACC,KAAM,SACP,CAACA,KAAM,UAETU,KAAM,CACJ,CAACC,KAAM,QAASE,OAAQ,GACxB,CAACF,KAAM,QAASE,OAAQ,IAE1BW,cAAe,CACb,CAACI,QAAS,gBAAiBH,UAAU,GACrC,CAACG,QAAS,gBAAiBH,UAAU,QAG5C,CAACnG,IACJ4G,QAAQC,IAAI,mBAAmBjH,GAM/B,eAAC,EAAemH,SAAhB,CAAyB3G,MAAO,CAACR,EAAWI,GAA5C,UACE,cAAC,EAAD,IACA,uBACA,cAAC,EAAD,IACA,uBACA,cAAC,EAAD,IACA,uBACA,cAAC,EAAD,IACA,uBACA,cAAC,EAAD,IACA,uBACA,cAAC,EAAD,IACA,uBACA,cAAC,EAAD,IACA,uBACA,cAAC,EAAD,IACA,uBACA,cAAC,EAAD,IACA,2BC3DWgH,MAlBf,SAAatI,GACX,IAAMI,EAAcJ,EAAMI,YAE1B,OAAQ,qCACN,cAAC,EAAD,CAAaA,YAAaA,IAC1B,cAAC,EAAD,IACA,eAAC,IAAD,WACE,cAAC,EAAD,IACA,eAAC,IAAD,WACE,cAAC,IAAD,CAAOmI,KAAK,IAAIC,SAAU,cAAC,EAAD,MAC1B,cAAC,IAAD,CAAOD,KAAK,aAAaC,SAAU,cAAC,EAAD,MACnC,cAAC,IAAD,CAAOD,KAAK,wBAAwBC,SAAU,cAAC,EAAD,MAC9C,cAAC,IAAD,CAAOC,UAAW7I,c,oBCL1B8I,IAASC,cAVc,CACrBC,OAAQC,0CACRC,WAAYD,sCACZE,UAAWF,sBACXG,YAAaH,6EACbI,cAAeJ,kCACfK,kBAAmBL,eACnBM,MAAON,4CACPO,cAAeP,iBAGV,IAAMQ,EAAOX,IAASW,OAIvBC,GAHYZ,IAASa,YAGV,IAAIb,IAASW,KAAKG,oBAE5B,SAASC,IAAqBJ,EAAKK,gBAAgBJ,GAD1DA,EAASK,oBAAoB,CAAEC,OAAQ,mBAsCxBlB,EAAf,EAAeA,ICpDFmB,EAAc/I,IAAMC,cAAc,MAEzC+I,E,kDAEJ,aAAe,IAAD,8BACZ,gBAMFC,oBAAsB,KALpB,EAAKC,MAAQ,CACX5J,YAAa,MAHH,E,qDASd,WAAqB,IAAD,OAClB6J,KAAKF,oBAAsBG,EAAsBC,oBAAmB,SAAAC,GAClE,EAAKC,SAAS,CAAEjK,YAAagK,S,kCAIjC,WACEH,KAAKF,wB,oBAGP,WACE,OACE,mCAEIE,KAAKD,MAAM5J,YACR,gCACC,cAAC,EAAD,CAAKA,YAAa6J,KAAKD,MAAM5J,cAC7B,wBAAQ6F,QAAS,kBAAMiE,EAAsBI,WAA7C,wBAGF,wBAAQrE,QAASiE,EAAjB,uC,GA/BQpJ,IAAMyJ,WAuCpBC,EAAcC,SAASC,eAAe,QAC5CC,IAASC,OAAO,cAAC,EAAD,IAAWJ,K","file":"static/js/main.214c5ea4.chunk.js","sourcesContent":["import React from 'react';\n\nfunction ErrorPage() {\n  return (\n      <h1>Oops! Page not found!</h1>\n    );\n}\n\nexport default ErrorPage;\n","import React from \"react\";\nimport {Link} from 'react-router-dom';\n\nfunction NavSidebar() {\n  return (    <div>\n      <Link to=\"/\">Home </Link>\n      <Link to=\"/about\">About Us </Link>\n      <Link to=\"/shop\">Shop Now </Link>\n    </div>);\n}\n\nexport default NavSidebar\n","import React from 'react';\n\nfunction ProfilePicture(props) {\n  return (<img\n    className=\"profPicture\"\n    id=\"userPicture\"\n    src={props.currentUser.photoURL}\n    alt={props.currentUser.photoURL}/>);\n}\n\nexport default ProfilePicture;\n","import React from 'react';\n\nfunction ProfileDetails(props) {\n    return (<div className=\"profDetails\">\n    <div>Google Account</div>\n    <div id=\"userName\">{props.currentUser.displayName}</div>\n    <div id=\"userEmail\">{props.currentUser.email}</div>\n  </div>);\n}\n\nexport default ProfileDetails;\n","import React, {useState} from 'react';\nimport ProfilePicture from './ProfilePicture';\nimport ProfileDetails from './ProfileDetails';\n\nfunction UserProfile(props) {\n  const [hidden, setHidden] = useState(true);\n  return (<div>\n    <ProfilePicture currentUser={props.currentUser}/>\n    <ProfileDetails currentUser={props.currentUser}/>\n  </div>);\n}\n\nexport default UserProfile;\n","import React from 'react';\n\nfunction AppHeader() {\n  return (\n      <div>\n        <h2>Dungeon World Character Sheet</h2>\n        <p>\n          <i>v1.0.0-alpha by Godmar02</i>\n        </p>\n      </div>\n    );\n}\n\nexport default AppHeader;\n","import React from 'react';\n\nconst CharacterState = React.createContext([{}, () => {}]);\n\nexport default CharacterState;\n","import React, {useContext} from 'react';\nimport CharacterState from './contexts/CharacterState';\n\nfunction SheetHeader() {\n  // Accessing and adding to character using context and useEffect\n  const [character, setCharacter] = useContext(CharacterState);\n\n  return (\n    <div>\n      <div>Adventure: {character.charaName} ({character.owner})</div>\n    </div>);\n}\n\nexport default SheetHeader;\n","import React, {useContext, useEffect} from 'react';\nimport CharacterState from './contexts/CharacterState';\n\nfunction CharacterDetailsTable() {\n\n  // Accessing and adding to character using context and useEffect\n  const [character, setCharacter] = useContext(CharacterState);\n\n  return (<table style={{\"width\" : \"100%\"}} id=\"basicInfoTable\">\n    <tbody>\n      <tr>\n        <th style={{\"width\" : \"25%\"}}>\n          <label htmlFor=\"backstory\">BACKSTORY</label>\n        </th>\n        <td>\n          <textarea placeholder=\"Describe your character's backstory and anything else about your characters identity here\" value={character.backstory} name=\"backstory\" onChange={event => setCharacter(character => ({...character,backstory: event.target.value}))}/>\n        </td>\n      </tr>\n      <tr>\n        <th style={{\"width\" : \"25%\"}}>\n          <label htmlFor=\"look\">LOOK</label>\n        </th>\n        <td>\n          <textarea placeholder=\"Describe your character's appearance here\" name=\"look\" value={character.look} onChange={event => setCharacter(character => ({...character,look: event.target.value}))}/>\n        </td>\n      </tr>\n    </tbody>\n  </table>);\n}\n\nexport default CharacterDetailsTable;\n","import React, {useContext} from 'react';\nimport CharacterState from './contexts/CharacterState';\nimport {races} from '../data/raceList';\nimport {dwClasses} from '../data/classList';\nimport {alignments} from '../data/classAlignments';\nimport {classDetails} from '../data/classDetails';\n\nfunction CharacterTypeTable() {\n\n  // Accessing and adding to character using context and useEffect\n  const [character, setCharacter] = useContext(CharacterState);\n  const dwc = character.dwClass;\n  const alig = character.alignment;\n  const race = character.race;\n\n  const raceAttributes = () => {\n    if (character.dwClass && character.race) {\n      return (classDetails.[dwc].raceAttributes.[race]);\n    } else {\n      return ('');\n    }\n  };\n\n  const alignmentAttributes = () => {\n    if (character.dwClass && character.alignment) {\n      return (classDetails.[dwc].alignmentAttributes.[alig]);\n    } else {\n      return ('');\n    }\n  };\n\n  return (\n  <table style={{\"width\" : \"100%\"}} id=\"additionalInfoTable\">\n    <tbody>\n      <tr>\n        <th>\n          <label style={{\"width\" : \"25%\"}} htmlFor=\"dwClass\">CLASS</label>\n        </th>\n        <td style={{\"width\" : \"25%\"}}>\n          <select\n            tabIndex={-1}\n            value={character.dwClass || \"null\"}\n            onChange={event => {\n              setCharacter(character => ({...character,dwClass: event.target.value}));\n              setCharacter(character => ({...character,alignment: \"null\"}))}}>\n            <option disabled value=\"null\" hidden />\n            {\n              dwClasses.map((data, key) => {\n                return (\n                <option value={data} key={key}>\n                  {data}\n                </option>);\n              })\n            }\n            </select>\n        </td>\n        <td style={{\"width\" : \"50%\"}}/>\n      </tr>\n      <tr>\n        <th>\n          <label htmlFor=\"race\">RACE</label>\n        </th>\n        <td>\n          <select\n            tabIndex={-1}\n            value={character.race || \"null\"}\n            onChange={event => setCharacter(character => ({...character,race: event.target.value}))}>\n            <option disabled value=\"null\" hidden />\n            {\n              races.map((data, key) => {\n                return (\n                <option value={data} key={key}>\n                  {data}\n                </option>);\n              })\n            }\n          </select>\n        </td>\n        <td>\n          <textarea className=\"grey\" readOnly=\"readOnly\" value={raceAttributes()}/>\n        </td>\n      </tr>\n      <tr>\n        <th>\n          <label htmlFor=\"alignment\">ALIGNMENT</label>\n        </th>\n        <td>\n          <select\n            tabIndex={-1}\n            value={character.alignment || \"null\"}\n            onChange={event => setCharacter(character => ({...character,alignment: event.target.value}))}>\n            <option disabled value=\"null\" hidden />\n            {\n              character.dwClass && alignments.[dwc].map((data, key) => {\n              return (\n              <option value={data} key={key}>\n                {data}\n              </option>);})\n            }\n          </select>\n        </td>\n        <td>\n          <textarea className=\"grey\" readOnly=\"readOnly\" value={alignmentAttributes()}/>\n        </td>\n      </tr>\n    </tbody>\n  </table>);\n}\n\nexport default CharacterTypeTable;\n","import React, {useContext} from 'react';\nimport CharacterState from './contexts/CharacterState';\n\nfunction Level() {\n\n  // Accessing and adding to character using context and useEffect\n  const [character, setCharacter] = useContext(CharacterState);\n\n  return (\n    <table>\n      <tbody>\n        <tr>\n          <th>\n            <label htmlFor=\"level\">LEVEL</label>\n          </th>\n          <td>\n            <input type=\"number\" min={1} className=\"shortfield\" name=\"level\" value={character.level || ''} onChange={event => setCharacter(character => ({...character,level: event.target.value}))}/>\n          </td>\n        </tr>\n      </tbody>\n    </table>);\n}\n\nexport default Level;\n","import React, {useContext} from 'react';\nimport CharacterState from './contexts/CharacterState';\n\nfunction XP() {\n\n  // Accessing and adding to character using context and useEffect\n  const [character, setCharacter] = useContext(CharacterState);\n\n  // Total Load\n  const calcMaxXp = () => {\n    if (character.level) {\n      return (\"/ \" + (parseInt(character.level,10) + 7));\n    } else {\n      return ('');\n    }\n  };\n\n  return (\n    <table>\n      <tbody>\n        <tr>\n          <th>\n            <label htmlFor=\"xp\">XP</label>\n          </th>\n          <td>\n            <input type=\"number\" min={0} className=\"shortfield\" name=\"xp\" value={character.xp || ''} onChange={event => setCharacter(character => ({...character,xp: event.target.value}))}/>\n          </td>\n          <td>\n            <input type=\"text\" className=\"shortfield grey\" name=\"maxXp\" readOnly=\"readOnly\" value={calcMaxXp()} />\n          </td>\n        </tr>\n      </tbody>\n    </table>);\n}\n\nexport default XP;\n","import React from 'react';\nimport Level from './Level'\nimport XP from './XP'\n\nfunction BasicAttributesTable() {\n\n  return (\n    <div className='myForm'>\n        <div><Level/></div>\n        <div><XP/></div>\n    </div>);\n}\n\nexport default BasicAttributesTable;\n","import React, {useContext} from 'react';\nimport CharacterState from './contexts/CharacterState';\nimport {classDetails} from '../data/classDetails';\n\nfunction Damage() {\n\n  // Accessing and adding to character using context and useEffect\n  const [character] = useContext(CharacterState);\n  const dwc = character.dwClass;\n\n  const damage = () => {\n    if (character.dwClass) {\n      return (classDetails.[dwc].damage);\n    } else {\n      return ('');\n    }\n  };\n\n  return (\n    <table id=\"damage\">\n      <thead>\n        <tr>\n          <th>\n            <label htmlFor=\"damage\">DAMAGE</label>\n          </th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr>\n          <td>\n            <input type=\"text\" className=\"shortfield grey\" readOnly=\"readOnly\" value={damage()}/>\n          </td>\n        </tr>\n      </tbody>\n    </table>\n  );\n}\nexport default Damage;\n","import React, {useContext} from 'react';\nimport CharacterState from './contexts/CharacterState';\n\nfunction Armour() {\n\n  // Accessing and adding to character using context and useEffect\n  const [character, setCharacter] = useContext(CharacterState);\n\n  return (\n    <table id=\"armour\">\n      <thead>\n        <tr>\n          <th>\n            <label htmlFor=\"armour\">ARMOUR</label>\n          </th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr>\n          <td>\n            <input type=\"number\" min={0} className=\"shortfield\" name=\"armour\" value={character.armour || ''} onChange={event => setCharacter(character => ({...character,armour: event.target.value}))}/>\n          </td>\n        </tr>\n      </tbody>\n    </table>\n  );\n}\n\nexport default Armour;\n","import React, {useContext} from 'react';\nimport CharacterState from './contexts/CharacterState';\n\nfunction Funds() {\n\n  // Accessing and adding to character using context and useEffect\n  const [character, setCharacter] = useContext(CharacterState);\n\n  return (\n    <table id=\"funds\">\n      <thead>\n        <tr>\n          <th>\n            <label htmlFor=\"funds\">FUNDS</label>\n          </th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr>\n          <td>\n            <input type=\"number\" className=\"shortfield\" name=\"funds\"\n              min={0} id=\"funds\" value={character.funds || ''} onChange={event => setCharacter(character => ({...character,funds: event.target.value}))}/>\n          </td>\n        </tr>\n      </tbody>\n    </table>\n  );\n}\n\nexport default Funds;\n","import React, {useContext} from 'react';\nimport CharacterState from './contexts/CharacterState';\nimport {classDetails} from '../data/classDetails';\n\nfunction HP() {\n\n  // Accessing and adding to character using context and useEffect\n  const [character, setCharacter] = useContext(CharacterState);\n\n  const dwc = character.dwClass;\n  const maxHp = () => {\n    if (character.dwClass && character.abilities) {\n      return (\"/ \" + (classDetails.[dwc].baseHp + parseInt(character.abilities.find(x => x.category === 'CON').score ,10)));\n    } else {\n      return ('');\n    }\n  };\n\n  return (\n    <table id=\"hp\">\n      <thead>\n        <tr>\n          <th colSpan={2}>\n            <label htmlFor=\"hp\">HP</label>\n          </th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr>\n          <td>\n            <input type=\"number\" min={0} className=\"shortfield\" name=\"hp\" value={character.hp || ''} onChange={event => setCharacter(character => ({...character,hp: event.target.value}))}/>\n          </td>\n          <td>\n            <input type=\"text\" className=\"shortfield grey\" name=\"maxHp\" readOnly=\"readOnly\" value={maxHp()} />\n          </td>\n        </tr>\n      </tbody>\n    </table>\n  );\n}\n\nexport default HP;\n","import React from 'react';\nimport Damage from './Damage'\nimport Armour from './Armour'\nimport Funds from './Funds'\nimport HP from './HP'\n\nfunction ExtraAttributes() {\n\n  return (\n  <div className='myForm'>\n    <div><Damage/></div>\n    <div><Armour/></div>\n    <div><Funds/></div>\n    <div><HP/></div>\n  </div>);\n}\n\nexport default ExtraAttributes;\n","import React, {useContext} from 'react';\nimport CharacterState from './contexts/CharacterState';\nimport {abilityAfflictions} from '../data/abilityAfflictions';\n\nfunction AbilitiesTable() {\n\n  // Accessing and adding to character using context and useEffect\n  const [character, setCharacter] = useContext(CharacterState);\n\n  const updateAbilityScore = index => e => {\n    let newAbilities = [...character.abilities]; // copying the old array\n    newAbilities[index] = {...character.abilities[index], score: e.target.value}; // replace value\n    setCharacter(character => ({...character, abilities: newAbilities})); // set array back\n  }\n\n  const updateAbilityAffliction = index => e => {\n    let newAbilities = [...character.abilities]; // copying the old array\n    newAbilities[index] = {...character.abilities[index], affliction: e.target.value}; // replace value\n    setCharacter(character => ({...character, abilities: newAbilities})); // set array back\n  }\n\n  const abilityModifier = (abilityScore, abilityAffliction) => {\n\n    if (abilityScore && abilityAffliction) {\n    let baseModifier;\n    let afflicted;\n\n    abilityScore = parseInt(abilityScore,10);\n\n    if ([1, 2, 3].indexOf(abilityScore) > -1) {\n      baseModifier = -3;\n    } else if ([4, 5].indexOf(abilityScore) > -1) {\n      baseModifier = -2;\n    } else if ([6, 7, 8].indexOf(abilityScore) > -1) {\n      baseModifier = -1;\n    } else if ([9, 10, 11, 12].indexOf(abilityScore) > -1) {\n      baseModifier = 0;\n    } else if ([13, 14, 15].indexOf(abilityScore) > -1) {\n      baseModifier = 1;\n    } else if ([16, 17].indexOf(abilityScore) > -1) {\n      baseModifier = 2;\n    } else if (abilityScore === 18) {\n      baseModifier = 3;\n    }\n\n    /*-1 if afflicted*/\n    if (abilityAffliction === \"Unafflicted\") {\n      afflicted = 0;\n    } else {\n      afflicted = 1;\n    }\n\n    let modifier = (baseModifier - afflicted);\n\n    if (modifier > 0) {\n      return(\"+\" + modifier);\n    } else {\n      return (modifier);\n    }\n  } else {\n    return ('')\n  }\n  }\n\n  return (\n     <table style={{\"width\":\"100%\"}} id=\"abilitiesTable\">\n       <thead>\n         <tr>\n           {\n            character.abilities && character.abilities.map((abilities, index) => {\n            return (\n              <th key={index}>\n                <label\n                  htmlFor={abilities.category}\n                  value={abilities.category}>\n                  {abilities.category}\n                </label>\n              </th>)\n           })\n         }\n         </tr>\n       </thead>\n       <tbody>\n         <tr>\n           {\n            character.abilities && character.abilities.map((abilities, index) => {\n            return (\n              <td key={index}>\n                <input\n                  type=\"number\"\n                  min={1} max={18}\n                  className=\"ability\"\n                  value={abilities.score}\n                  onChange={updateAbilityScore(index)} />\n            </td>)\n           })\n         }\n         </tr>\n         <tr>\n           {\n            character.abilities && character.abilities.map((abilities, index) => {\n            return (\n              <td key={index}>\n                <input\n                  type=\"text\"\n                  className=\"grey tallfield\"\n                  value={abilityModifier(abilities.score, abilities.affliction)}\n                  readOnly />\n            </td>)\n           })\n         }\n         </tr>\n         <tr>\n           {\n            character.abilities && character.abilities.map((abilities,index) => {\n            const ab = abilities.category;\n            return (\n              <td key={index}>\n                <select\n                  tabIndex={-1}\n                  className=\"abilityAffliction\"\n                  value={abilities.affliction || \"null\"}\n                  onChange={updateAbilityAffliction(index)}>\n                  <option disabled value=\"null\" hidden />\n                    {\n                      abilityAfflictions.[ab].map((data, key) => {\n                        return (\n                        <option value={data} key={key}>\n                          {data}\n                        </option>);\n                      })\n                    }\n                </select>\n              </td>)\n           })\n         }\n         </tr>\n       </tbody>\n     </table>\n    );\n}\n\nexport default AbilitiesTable;\n","import React, {useContext} from 'react';\nimport CharacterState from './contexts/CharacterState';\n\nfunction BondsTable() {\n\n  // Accessing and adding to character using context and useEffect\n  const [character, setCharacter] = useContext(CharacterState);\n\n  // State manipulation\n  const updateBond = index => e => {\n    let newBonds = [...character.bonds]; // copying the old array\n    newBonds[index] = {...character.bonds[index], bond: e.target.value}; // replace value\n    setCharacter(character => ({...character, bonds: newBonds})); // set array back\n  }\n\n  // Delete rows in the table\n  const deleteBondRow = index => {\n    const newBonds = [...character.bonds]; // copying the old array\n    if (character.bonds.length !== 1) { //don't delete last row\n      newBonds.splice(index, 1); // remove item from array\n      setCharacter(character => ({...character, bonds: newBonds})); // set array back\n    } else {\n      alert('Cannot delete final row');\n    }\n  }\n\n  // Add rows in the table\n  const addBondsRow = () => {\n    const newBonds = [...character.bonds, {bond: \"\"}]; // copying the old array and adding blank item\n    setCharacter(character => ({...character, bonds: newBonds})); // set array back\n  }\n\n  return (\n    <table style={{\"width\" : \"100%\"}} id=\"bondsTable\">\n      <thead>\n        <tr>\n          <th style={{\"width\" : \"100%\"}}>\n            <label>BONDS</label>\n          </th>\n          <td>\n            <button\n              type=\"button\"\n              className=\"addRow\"\n              onClick={() => addBondsRow()}>\n              +\n            </button>\n          </td>\n        </tr>\n      </thead>\n      <tbody>\n        {\n         character.bonds && character.bonds.map((bonds,index) => {\n         return (\n           <tr key={index}>\n               <td>\n                 <textarea\n                   placeholder=\"Add 2-3 bonds here\"\n                   value={bonds.bond}\n                   name={\"bond\" + index}\n                   onChange={updateBond(index)}\n                   />\n               </td>\n               <td>\n                 <button\n                   type=\"button\"\n                   className=\"deleteRow\"\n                   onClick={() => deleteBondRow(index)}/>\n               </td>\n           </tr>)\n        })\n      }\n      </tbody>\n      <tfoot/>\n    </table>\n    );\n}\n\nexport default BondsTable;\n","import React, {useContext} from 'react';\nimport CharacterState from './contexts/CharacterState';\nimport {classDetails} from '../data/classDetails';\n\nfunction GearTable() {\n\n  // Accessing and adding to character using context and useEffect\n  const [character, setCharacter] = useContext(CharacterState);\n  const dwc = character.dwClass;\n\n  // Total Load\n  const totalLoad = () => {\n    if (character.gear) {\n      return (character.gear.reduce((totalLoad,data) => totalLoad + parseInt((data.weight || 0),10) ,0));\n    } else {\n      return ('');\n    }\n  };\n\n  // Max Load\n  const maxLoad = () => {\n    let str = character.abilities.find(x => x.category === 'STR');\n    if (character.dwClass && str.score && str.affliction) {\n      let baseModifier;\n      let abilityAffliction = str.affliction;\n      let abilityScore = parseInt(str.score,10);\n      let afflicted;\n\n      if ([1, 2, 3].indexOf(abilityScore) > -1) {\n        baseModifier = -3;\n      } else if ([4, 5].indexOf(abilityScore) > -1) {\n        baseModifier = -2;\n      } else if ([6, 7, 8].indexOf(abilityScore) > -1) {\n        baseModifier = -1;\n      } else if ([9, 10, 11, 12].indexOf(abilityScore) > -1) {\n        baseModifier = 0;\n      } else if ([13, 14, 15].indexOf(abilityScore) > -1) {\n        baseModifier = 1;\n      } else if ([16, 17].indexOf(abilityScore) > -1) {\n        baseModifier = 2;\n      } else if (abilityScore === 18) {\n        baseModifier = 3;\n      }\n\n      /*-1 if afflicted*/\n      if (abilityAffliction === \"Unafflicted\") {\n        afflicted = 0;\n      } else {\n        afflicted = 1;\n      }\n\n      let modifier = (baseModifier - afflicted);\n\n      return (\"/ \" + (classDetails.[dwc].baseLoad + modifier));\n    } else {\n      return ('');\n    }\n  };\n\n  // State manipulation\n  const updateItem = index => e => {\n    let newItems = [...character.gear]; // copying the old array\n    newItems[index] = {...character.gear[index], item: e.target.value}; // replace value\n    setCharacter(character => ({...character, gear: newItems})); // set array back\n  }\n\n  const updateItemWeight = index => e => {\n    let newItems = [...character.gear]; // copying the old array\n    newItems[index] = {...character.gear[index], weight: e.target.value}; // replace value\n    setCharacter(character => ({...character, gear: newItems})); // set array back\n  }\n\n  // Delete rows in the table\n  const deleteItemRow = index => {\n    const newItems = [...character.gear]; // copying the old array\n    if (character.gear.length !== 1) { //don't delete last row\n      newItems.splice(index, 1); // remove item from array\n      setCharacter(character => ({...character, gear: newItems})); // set array back\n    } else {\n      alert('Cannot delete final row');\n    }\n  }\n\n  // Add rows in the table\n  const addItemRow = () => {\n    const newItems = [...character.gear, {item: \"\", weight: \"\"}]; // copying the old array and adding blank item\n    setCharacter(character => ({...character, gear: newItems})); // set array back\n  }\n  //,\n\n  return (\n    <table style={{\"width\":\"100%\"}} id=\"gearTable\">\n      <thead>\n        <tr>\n          <th colSpan={4}><label>GEAR</label></th>\n        </tr>\n        <tr>\n          <th style={{\"width\":\"100%\"}}><label>ITEM</label></th>\n          <th colSpan={2}><label>WEIGHT</label></th>\n          <td>\n            <button\n              type=\"button\"\n              className=\"addRow\"\n              onClick={() => addItemRow()}>\n              +\n            </button>\n          </td>\n        </tr>\n      </thead>\n      <tbody>\n        {\n         character.gear && character.gear.map((gear,index) => {\n         return (\n           <tr key={index}>\n               <td>\n                 <textarea\n                   placeholder=\"Add any items and descriptions here\"\n                   value={gear.item}\n                   onChange={updateItem(index)}/>\n               </td>\n               <td colSpan={2}>\n                 <input\n                   type=\"number\"\n                   min={0}\n                   value={gear.weight}\n                   onChange={updateItemWeight(index)}/>\n               </td>\n               <td>\n                 <button\n                   type=\"button\"\n                   className=\"deleteRow\"\n                   onClick={() => deleteItemRow(index)}/>\n               </td>\n           </tr>)\n        })\n      }\n      </tbody>\n      <tfoot>\n        <tr>\n          <th><label htmlFor=\"load\">LOAD</label></th>\n          <td>\n            <input type=\"number\" className=\"shortfield grey\" readOnly value={totalLoad()} />\n          </td>\n          <td>\n            <input type=\"text\" className=\"shortfield grey\" readOnly=\"readOnly\" value={maxLoad()} />\n          </td>\n          <td />\n        </tr>\n      </tfoot>\n    </table>\n    );\n}\n\nexport default GearTable;\n","import React, {useContext} from 'react';\nimport CharacterState from './contexts/CharacterState';\n\nfunction ClassFeaturesTable() {\n\n  // Accessing and adding to character using context and useEffect\n  const [character, setCharacter] = useContext(CharacterState);\n\n  // State manipulation\n  const updateFeatureCheckbox = index => e => {\n    let newFeatures = [...character.classFeatures]; // copying the old array\n    newFeatures[index] = {...character.classFeatures[index], checkbox: e.target.checked}; // replace value\n    setCharacter(character => ({...character, classFeatures: newFeatures})); // set array back\n  }\n\n  const updateFeature = index => e => {\n    let newFeatures = [...character.classFeatures]; // copying the old array\n    newFeatures[index] = {...character.classFeatures[index], feature: e.target.value}; // replace value\n    setCharacter(character => ({...character, classFeatures: newFeatures})); // set array back\n  }\n\n  // Delete rows in the table\n  const deleteFeatureRow = index => {\n    const newFeatures = [...character.classFeatures]; // copying the old array\n    if (character.classFeatures.length !== 1) { //don't delete last row\n      newFeatures.splice(index, 1); // remove item from array\n      setCharacter(character => ({...character, classFeatures: newFeatures})); // set array back\n    } else {\n      alert('Cannot delete final row');\n    }\n  }\n\n  // Add rows in the table\n  const addFeatureRow = () => {\n    const newFeatures = [...character.classFeatures, {feature: \"\", checkbox: false}]; // copying the old array and adding blank item\n    setCharacter(character => ({...character, classFeatures: newFeatures})); // set array back\n  }\n\n  return (\n    <table style={{\n        \"width\" : \"100%\"\n      }} id=\"classFeaturesTable\">\n      <thead>\n        <tr>\n          <th colSpan={2} style={{\n              \"width\" : \"100%\"\n            }}>\n            <label>CLASS FEATURES</label>\n          </th>\n          <td>\n            <button\n              type=\"button\"\n              className=\"addRow\"\n              onClick={() => addFeatureRow()}>\n              +\n            </button>\n          </td>\n        </tr>\n      </thead>\n      <tbody>\n          {\n           character.classFeatures && character.classFeatures.map((classFeatures,index) => {\n           return (\n             <tr key={index}>\n               <td>\n                 <input\n                   type=\"checkbox\"\n                   className=\"checkbox\"\n                   name={\"classFeatureCheckbox\" + index}\n                   checked={!!classFeatures.checkbox}\n                   onChange={updateFeatureCheckbox(index)}/>\n               </td>\n                 <td>\n                   <textarea\n                     placeholder=\"Add any Class Features here (e.g. Spell Lists, Poison Recipes, Druid Balance, Paladin Quests or anything else!)\"\n                     value={classFeatures.feature}\n                     name={\"classFeature\" + index}\n                     onChange={updateFeature(index)}/>\n                 </td>\n                 <td>\n                   <button\n                     type=\"button\"\n                     className=\"deleteRow\"\n                     onClick={() => deleteFeatureRow(index)}/>\n                 </td>\n             </tr>)\n          })\n        }\n      </tbody>\n      <tfoot/>\n    </table>\n    );\n}\n\nexport default ClassFeaturesTable;\n","import React, {useState, useEffect} from 'react';\nimport CharacterState from './contexts/CharacterState';\nimport { useParams } from \"react-router\";\nimport SheetHeader from './SheetHeader'\nimport CharacterDetailsTable from './CharacterDetailsTable'\nimport CharacterTypeTable from './CharacterTypeTable'\nimport BasicAttributesTable from './BasicAttributesTable'\nimport ExtraAttributes from './ExtraAttributes'\nimport AbilitiesTable from './AbilitiesTable'\nimport BondsTable from './BondsTable'\nimport GearTable from './GearTable'\nimport ClassFeaturesTable from './ClassFeaturesTable'\n//import useQueryString from './hooks/useQueryString'\n\nfunction CharacterSheet() {\n\n  // retrieve URL parameters for usage\n  let { campaign } = useParams();\n\n  console.log(\"campaign:\",campaign);\n\n  // Definitions for state\n  const [character, setCharacter] = useState({});\n\n  // Setting state for Character using useEffect hook\n  useEffect(() => {\n    setCharacter({\n          owner: \"owner@email.com\",\n          charaName: \"Bob\",\n          look: \"scraggly\",\n          backstory: \"sad backstory\",\n          dwClass: \"Paladin\",\n          race: \"Elf\",\n          alignment: \"Good\",\n          level: 2,\n          xp: 2,\n          abilities: [\n            {category: \"STR\", score: 1, affliction: \"Weak\"},\n            {category: \"DEX\", score: 1, affliction: \"Unafflicted\"},\n            {category: \"CON\", score: 1, affliction: \"Unafflicted\"},\n            {category: \"INT\", score: 1, affliction: \"Unafflicted\"},\n            {category: \"WIS\", score: 1, affliction: \"Unafflicted\"},\n            {category: \"CHA\", score: 1, affliction: \"Unafflicted\"}\n          ],\n          armour: 3,\n          hp:2,\n          funds: 10,\n          bonds: [\n            {bond: \"bond0\"},\n            {bond: \"bond1\"}\n          ],\n          gear: [\n            {item: \"item0\", weight: 1},\n            {item: \"item1\", weight: 2}\n          ],\n          classFeatures: [\n            {feature: \"classFeature0\", checkbox: true},\n            {feature: \"classFeature1\", checkbox: false},\n          ]\n        })\n  }, [setCharacter]);\n  console.log(\"character state:\",character);\n\n  // Use a custom hook to subscribe to the character provided as a URL query parameter\n  //const [character, setCharacter] = useQueryString('character');\n\n  return (\n  <CharacterState.Provider value={[character, setCharacter]}>\n    <SheetHeader/>\n    <br/>\n    <CharacterDetailsTable/>\n    <br/>\n    <CharacterTypeTable/>\n    <br/>\n    <BasicAttributesTable/>\n    <br/>\n    <ExtraAttributes/>\n    <br/>\n    <AbilitiesTable/>\n    <br/>\n    <BondsTable/>\n    <br/>\n    <GearTable/>\n    <br/>\n    <ClassFeaturesTable/>\n    <br/>\n  </CharacterState.Provider>);\n}\n\nexport default CharacterSheet;\n","import React from 'react';\nimport {BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport ErrorPage from './ErrorPage'\nimport NavSidebar from './NavSidebar';\nimport UserProfile from './UserProfile';\nimport AppHeader from './AppHeader';\nimport CharacterSheet from './CharacterSheet';\n\nfunction App(props) {\n  const currentUser = props.currentUser;\n\n  return (<>\n    <UserProfile currentUser={currentUser}/>\n    <AppHeader/>\n    <Router>\n      <NavSidebar/>\n      <Switch>\n        <Route path=\"/\" children={<CharacterSheet/>} />\n        <Route path=\"/:campaign\" children={<CharacterSheet/>} />\n        <Route path=\"/:campaign/:character\" children={<CharacterSheet/>} />\n        <Route component={ErrorPage} />\n      </Switch>\n    </Router>\n  </>)\n}\n\nexport default App;\n","import firebase from \"firebase/app\";\nimport \"firebase/firestore\";\nimport \"firebase/auth\";\n\n// Initialise Firebase and setting up firestore and auth for use later\nconst firebaseConfig = {\n  apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\n  authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\n  projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\n  databaseURL: process.env.REACT_APP_FIREBASE_DATABASE_URL,\n  storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,\n  appId: process.env.REACT_APP_FIREBASE_APP_ID,\n  measurementId: process.env.REACT_APP_FIREBASE_MEASUREMENT_ID\n};\nfirebase.initializeApp(firebaseConfig);\nexport const auth = firebase.auth();\nexport const db = firebase.firestore();\n\n// Authenticate with Firebase-auth using the Google provider object\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({ prompt: 'select_account' });\nexport function SignInWithGoogle() { auth.signInWithPopup(provider)};\n\n// Firestore operations\nexport function createGroceryList(userName, userId) {\n    return db.collection('groceryLists')\n        .add({\n            created: firebase.firestore.FieldValue.serverTimestamp(),\n            createdBy: userId,\n            users: [{\n                userId: userId,\n                name: userName\n            }]\n        });\n};\n\nexport function getGroceryList(groceryListId) {\n    return db.collection('groceryLists')\n        .doc(groceryListId)\n        .get();\n};\n\nexport function getGroceryListItems(groceryListId) {\n    return db.collection('groceryLists')\n        .doc(groceryListId)\n        .collection('items')\n        .get();\n}\n\nexport function streamGroceryListItems(groceryListId, observer) {\n    return db.collection('groceryLists')\n        .doc(groceryListId)\n        .collection('items')\n        .orderBy('created')\n        .onSnapshot(observer);\n};\n\n// Default Export\nexport default firebase;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './custom.css';\nimport App from './components/App';\nimport * as FirestoreService from './services/firebase';\n\nexport const AuthContext = React.createContext(null);\n\nclass Index extends React.Component {\n\n  constructor() {\n    super();\n    this.state = {\n      currentUser: null\n    };\n  }\n\n  unsubscribeFromAuth = null;\n\n  componentDidMount() {\n    this.unsubscribeFromAuth = FirestoreService.auth.onAuthStateChanged(user => {\n      this.setState({ currentUser: user });\n    });\n  }\n\n  componentWillUnmount() {\n    this.unsubscribeFromAuth();\n  }\n\n  render() {\n    return (\n      <>\n        {\n          this.state.currentUser ?\n            (<div>\n              <App currentUser={this.state.currentUser} />\n              <button onClick={() => FirestoreService.auth.signOut()}>LOG OUT</button>\n            </div>\n            ) :\n            <button onClick={FirestoreService.SignInWithGoogle}>SIGN IN WITH GOOGLE</button>\n        }\n      </>\n    );\n  }\n}\n\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<Index />, rootElement);\n"],"sourceRoot":""}