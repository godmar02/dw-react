{"version":3,"sources":["components/ErrorPage.js","services/firebase.js","components/CreateCampaign.js","components/contexts/CreateCampaignState.js","components/Homepage.js","components/NavSidebar.js","components/profile/ProfilePicture.js","components/profile/ProfileDetails.js","components/profile/UserProfile.js","components/AppHeader.js","components/contexts/CharacterState.js","components/character/CharacterSheetHeader.js","components/character/CharacterDetailsTable.js","components/character/CharacterTypeTable.js","components/character/CharacterDamage.js","components/character/CharacterArmour.js","components/character/CharacterFunds.js","components/character/CharacterHP.js","components/character/CharacterLevel.js","components/character/CharacterXP.js","components/character/CharacterBasicAttributesTable.js","components/character/CharacterAbilitiesTable.js","components/character/CharacterBondsTable.js","components/character/CharacterItemsTable.js","components/character/CharacterClassFeaturesTable.js","components/character/CharacterSheet.js","components/contexts/CampaignState.js","components/campaign/CampaignSheetHeader.js","components/campaign/CreateCharacter.js","components/campaign/CampaignDetails.js","components/campaign/CampaignSheet.js","components/App.js","components/contexts/AuthState.js","index.js"],"names":["ErrorPage","firebase","initializeApp","apiKey","process","authDomain","projectId","databaseURL","storageBucket","messagingSenderId","appId","measurementId","auth","db","firestore","provider","GoogleAuthProvider","SignInWithGoogle","signInWithPopup","setCustomParameters","prompt","CreateCampaign","useState","campaignName","setCampaignName","saveCampaign","campaign","collection","doc","set","then","console","info","catch","error","alert","style","id","htmlFor","placeholder","name","onChange","event","target","value","onClick","CreateCampaignState","React","createContext","Homepage","campaigns","setCampaigns","show","setShow","useEffect","observer","next","querySnapshot","updatedCampaignList","docs","map","docSnapshot","onSnapshot","deleteCampaign","delete","log","index","to","Provider","NavSidebar","ProfilePicture","props","className","src","currentUser","photoURL","alt","ProfileDetails","displayName","email","UserProfile","AppHeader","CharacterState","CharacterSheetHeader","useContext","character","useParams","campaignURL","characterURL","fullName","CharacterDetailsTable","setCharacter","backstory","look","CharacterTypeTable","dwc","dwClass","alig","alignment","race","tabIndex","disabled","hidden","dwClasses","data","key","races","readOnly","classDetails","raceAttributes","alignments","alignmentAttributes","CharacterDamage","type","damage","CharacterArmour","min","armour","CharacterFunds","funds","CharacterHP","colSpan","hp","abilities","baseHp","parseInt","find","x","category","score","CharacterLevel","level","CharacterXP","xp","CharacterBasicAttributesTable","CharacterAbilitiesTable","updateAbilityScore","e","newAbilities","updateAbilityAffliction","affliction","abilityModifier","abilityScore","abilityAffliction","baseModifier","indexOf","modifier","max","ab","abilityAfflictions","CharacterBondsTable","updateBond","newBonds","bonds","bond","addBondsRow","length","splice","deleteBondRow","CharacterItemsTable","updateItem","newItems","items","item","updateItemWeight","weight","addItemRow","deleteItemRow","reduce","totalLoad","str","baseLoad","maxLoad","CharacterClassFeaturesTable","updateFeatureCheckbox","newFeatures","classFeatures","checkbox","checked","updateFeature","feature","addFeatureRow","deleteFeatureRow","CharacterSheet","isSaving","setIsSaving","FirebaseService","documentSnapshot","debouncedSave","useCallback","callback","delay","timer","args","clearTimeout","setTimeout","debounce","DEBOUNCE_SAVE_DELAY_MS","Object","keys","CampaignState","CampaignSheetHeader","CreateCharacter","charaName","setCharaName","saveCharacter","owner","CampaignDetails","deleteCharacter","characterData","CampaignSheet","setCampaign","updatedCharacterList","App","exact","path","component","AuthState","Index","setCurrentUser","onAuthStateChanged","user","signOut","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.53e4f3ba.chunk.js","sourcesContent":["import React from 'react';\n\nfunction ErrorPage() {\n  return (\n      <h1>Oops! Page not found!</h1>\n    );\n}\n\nexport default ErrorPage;\n","import firebase from \"firebase/app\";\nimport \"firebase/firestore\";\nimport \"firebase/auth\";\n\n// Initialise Firebase and setting up firestore and auth for use later\nconst firebaseConfig = {\n  apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\n  authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\n  projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\n  databaseURL: process.env.REACT_APP_FIREBASE_DATABASE_URL,\n  storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,\n  appId: process.env.REACT_APP_FIREBASE_APP_ID,\n  measurementId: process.env.REACT_APP_FIREBASE_MEASUREMENT_ID\n};\nfirebase.initializeApp(firebaseConfig);\nexport const auth = firebase.auth();\nexport const db = firebase.firestore();\n\n// Authenticate with Firebase-auth using the Google provider object\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({\n  prompt: 'select_account'\n});\nexport function SignInWithGoogle() {\n  auth.signInWithPopup(provider)\n};\n\n// Firestore operations\n\n// Create new blank campaign\nexport function createCampaign(campaign) {\n  return db.collection(\"campaigns\")\n    .doc(campaign).set({})\n};\n\n// Create new blank character\nexport function createCharacter(campaign,charaName) {\n  return db.collection(\"campaigns\")\n    .doc(campaign)\n    .collection(\"characters\")\n    .doc(charaName)\n    .set({\n      abilities: [\n        {category: \"STR\", score: \"\", affliction: \"Unafflicted\"},\n        {category: \"DEX\", score: \"\", affliction: \"Unafflicted\"},\n        {category: \"CON\", score: \"\", affliction: \"Unafflicted\"},\n        {category: \"INT\", score: \"\", affliction: \"Unafflicted\"},\n        {category: \"WIS\", score: \"\", affliction: \"Unafflicted\"},\n        {category: \"CHA\", score: \"\", affliction: \"Unafflicted\"}\n      ],\n      alignment: \"\",\n      armour: \"\",\n      backstory: \"\",\n      bonds: [\n        {bond: \"\"},\n      ],\n      classFeatures: [\n        {feature: \"\", checkbox: false}\n      ],\n      dwClass: \"\",\n      fullName: \"\",\n      funds: \"\",\n      hp: \"\",\n      items: [\n        {item: \"\", weight: \"\"},\n      ],\n      level: \"\",\n      look: \"\",\n      owner: \"\",\n      race: \"\",\n      xp: \"\"\n    });\n};\n// Save Character\nexport function saveCharacter(campaign, character, data) {\n  return db.collection(\"campaigns\")\n    .doc(campaign)\n    .collection(\"characters\")\n    .doc(character)\n    .set(data);\n};\n\n// Stream Campaign Data (all Campaigns)\nexport function streamCampaigns(observer) {\n  return db.collection(\"campaigns\")\n    .onSnapshot(observer);\n};\n// Stream Character Data (all Characters)\nexport function streamCharacters(campaign, observer) {\n  return db.collection(\"campaigns\")\n    .doc(campaign)\n    .collection(\"characters\")\n    .onSnapshot(observer);\n};\n// Stream Character Data (Selected Characters)\nexport function streamCharacter(campaign, character, observer) {\n  return db.collection(\"campaigns\")\n    .doc(campaign)\n    .collection(\"characters\")\n    .doc(character)\n    .onSnapshot(observer);\n};\n// Delete Campaign\nexport function deleteCampaign(campaign) {\n  return db.collection(\"campaigns\")\n    .doc(campaign)\n    .delete()\n};\n// Delete Characters\nexport function deleteCharacter(campaign, character) {\n  return db.collection(\"campaigns\")\n    .doc(campaign)\n    .collection(\"characters\")\n    .doc(character)\n    .delete()\n};\n\n// Default Export\nexport default firebase;\n","import React, {useState} from 'react';\nimport * as FirebaseService from 'services/firebase';\n\nfunction CreateCampaign() {\n\n  const [campaignName, setCampaignName] = useState(\"\");\n\n  // Create New Character\n  const saveCampaign = () => {\n    if (campaignName) { //don't save unless details present\n      FirebaseService.createCampaign(campaignName)\n      .then(() => {\n        console.info('Created Campaign:', campaignName);\n      })\n      .catch((error) => {\n        alert(\"Failed to create campaign, see console error\");\n        console.error(\"Error creating document:\", error);\n      });\n    } else {\n      alert('Cannot save blank campaign');\n    }\n  }\n\n  return (\n  <>\n  <table style={{\"width\" : \"100%\"}} id=\"basicInfoTable\">\n    <tbody>\n      <tr>\n        <th style={{\"width\" : \"25%\"}}>\n          <label htmlFor=\"campName\">CAMPAIGN NAME</label>\n        </th>\n        <td>\n          <textarea placeholder=\"Add your new Campaign Name, you wont be able to change this one saved\" name=\"campName\" onChange={event => setCampaignName(event.target.value)}/>\n        </td>\n      </tr>\n    </tbody>\n  </table>\n  <button onClick={() => saveCampaign()}>Save Campaign</button>\n  </>\n);\n}\n\nexport default CreateCampaign;\n","import React from 'react';\n\nconst CreateCampaignState = React.createContext([{}, () => {}]);\n\nexport default CreateCampaignState;\n","import React, {useState, useEffect} from 'react';\nimport {Link} from 'react-router-dom';\nimport * as FirebaseService from 'services/firebase';\nimport CreateCampaign from 'components/CreateCampaign';\nimport CreateCampaignState from 'components/contexts/CreateCampaignState';\n\nfunction Homepage() {\n\n  // Definitions for state\n  const [campaigns, setCampaigns] = useState({});\n  const [show, setShow] = useState(false);\n\n  // Use an effect hook to subscribe to the campaign stream and\n  // automatically unsubscribe when the component unmounts.\n  useEffect(() => {\n    const unsubscribe = FirebaseService.streamCampaigns({\n      next: querySnapshot => {\n        const updatedCampaignList = querySnapshot.docs.map((docSnapshot) => {\n          return ({id: docSnapshot.id})\n        });\n        setCampaigns(campaign => ({campaigns: updatedCampaignList}));\n      },\n      error: (error) => {\n        alert(\"Failed to load data correctly, see console error\");\n        console.error(\"Error loading data:\", error);\n      }\n    });\n    return unsubscribe;\n  }, [setCampaigns]);\n\n  const deleteCampaign = (campaignName) => {\n    if (campaignName) { //don't save unless details present\n      FirebaseService.deleteCampaign(campaignName).then(() => {\n        console.info('Deleted Campaign:', campaignName);\n      }).catch((error) => {\n        alert(\"Failed to delete campaign, see console error\");\n        console.error(\"Error deleting document:\", error);\n      });\n    } else {\n      alert('Cannot delete blank campaign');\n    }\n  }\n\n  console.log(\"Campaigns State:\", campaigns)\n\n  return (<div>\n    <br/>\n    <h1>WELCOME!</h1>\n    <table>\n      <thead>\n        <tr>\n          <th>CAMPAIGNS</th>\n          <th>\n            <button onClick={() => setShow(true)}>+</button>\n          </th>\n        </tr>\n      </thead>\n      <tbody>\n        {\n          campaigns.campaigns && campaigns.campaigns.map((campaign, index) => {\n            return (<tr key={index}>\n              <td>\n                <Link to={\"/dw-react/\" + campaign.id}>{campaign.id}</Link>\n              </td>\n              <td>\n                <button onClick={() => deleteCampaign(campaign.id)}>Delete</button>\n              </td>\n            </tr>)\n          })\n        }</tbody>\n    </table>\n    <CreateCampaignState.Provider value={[show, setShow]}>\n      {\n        show\n          ? <CreateCampaign/>\n          : null\n      }\n    </CreateCampaignState.Provider>\n  </div>);\n}\n\nexport default Homepage;\n","import React from 'react';\n\nfunction NavSidebar() {\n  return (\n    <div>\n    </div>);\n}\n\nexport default NavSidebar\n","import React from 'react';\n\nfunction ProfilePicture(props) {\n  return (<img\n    className=\"profPicture\"\n    id=\"userPicture\"\n    src={props.currentUser.photoURL}\n    alt=\"Google Profile\"/>);\n}\n\nexport default ProfilePicture;\n","import React from 'react';\n\nfunction ProfileDetails(props) {\n    return (\n      <div className=\"profDetails\">\n        <div>Google Account</div>\n        <div id=\"userName\">{props.currentUser.displayName}</div>\n        <div id=\"userEmail\">{props.currentUser.email}</div>\n      </div>\n    );\n}\n\nexport default ProfileDetails;\n","import React, {useState} from 'react';\nimport ProfilePicture from 'components/profile/ProfilePicture';\nimport ProfileDetails from 'components/profile/ProfileDetails';\n\nfunction UserProfile(props) {\n\n  const [show, setShow] = useState(false);\n\n  return (<div>\n    <ProfilePicture currentUser={props.currentUser}/>\n    {\n      show\n        ? <ProfileDetails currentUser={props.currentUser}/>\n        : null\n    }\n  </div>);\n}\n\nexport default UserProfile;\n","import React from 'react';\n\nfunction AppHeader() {\n\n  return (<div>\n    <h2>Dungeon World Character Sheet</h2>\n    <p>\n      <i>v0.10.0 by Godmar02</i>\n    </p>\n  </div>\n  );\n}\n\nexport default AppHeader;\n","import React from 'react';\n\nconst CharacterState = React.createContext([{}, () => {}]);\n\nexport default CharacterState;\n","import React, {useContext} from 'react';\nimport {Link} from 'react-router-dom';\nimport { useParams } from 'react-router';\nimport CharacterState from 'components/contexts/CharacterState';\n\nfunction CharacterSheetHeader() {\n\n  // Definitions for state\n  const [character] = useContext(CharacterState);\n\n  // retrieve URL parameters for usage\n  const { campaignURL, characterURL } = useParams();\n\n  return (\n    <div>\n      <Link to=\"/dw-react\">Home</Link> >\n      <Link to={\"/dw-react/\" + campaignURL}> {campaignURL}</Link> >\n      <p> {characterURL}</p>\n      <h1>{characterURL}</h1>\n      <p>{character.fullName}</p>\n    </div>);\n}\n\nexport default CharacterSheetHeader;\n","import React, {useContext} from 'react';\nimport CharacterState from 'components/contexts/CharacterState';\n\nfunction CharacterDetailsTable() {\n\n  // State Variables\n  const [character, setCharacter] = useContext(CharacterState);\n\n  return (<table style={{\"width\" : \"100%\"}} id=\"basicInfoTable\">\n    <tbody>\n      <tr>\n        <th style={{\"width\" : \"25%\"}}>\n          <label htmlFor=\"fullName\">FULL NAME</label>\n        </th>\n        <td>\n          <textarea placeholder=\"Add your characters full name here\" value={character.fullName} name=\"fullName\" onChange={event => setCharacter(character => ({...character,fullName: event.target.value}))}/>\n        </td>\n      </tr>\n      <tr>\n        <th style={{\"width\" : \"25%\"}}>\n          <label htmlFor=\"backstory\">BACKSTORY</label>\n        </th>\n        <td>\n          <textarea placeholder=\"Describe your character's backstory and anything else about your characters identity here\" value={character.backstory} name=\"backstory\" onChange={event => setCharacter(character => ({...character,backstory: event.target.value}))}/>\n        </td>\n      </tr>\n      <tr>\n        <th style={{\"width\" : \"25%\"}}>\n          <label htmlFor=\"look\">LOOK</label>\n        </th>\n        <td>\n          <textarea placeholder=\"Describe your character's appearance here\" name=\"look\" value={character.look} onChange={event => setCharacter(character => ({...character,look: event.target.value}))}/>\n        </td>\n      </tr>\n    </tbody>\n  </table>);\n}\n\nexport default CharacterDetailsTable;\n","import React, {useContext} from 'react';\nimport CharacterState from 'components/contexts/CharacterState';\nimport {races} from 'data/raceList';\nimport {dwClasses} from 'data/classList';\nimport {alignments} from 'data/classAlignments';\nimport {classDetails} from 'data/classDetails';\n\nfunction CharacterTypeTable() {\n\n  // State Variables\n  const [character, setCharacter] = useContext(CharacterState);\n  const dwc = character.dwClass;\n  const alig = character.alignment;\n  const race = character.race;\n\n  const raceAttributes = () => {\n    if (character.dwClass && character.race) {\n      return (classDetails.[dwc].raceAttributes.[race]);\n    } else {\n      return ('');\n    }\n  };\n\n  const alignmentAttributes = () => {\n    if (character.dwClass && character.alignment) {\n      return (classDetails.[dwc].alignmentAttributes.[alig]);\n    } else {\n      return ('');\n    }\n  };\n\n  return (\n  <table style={{\"width\" : \"100%\"}} id=\"additionalInfoTable\">\n    <tbody>\n      <tr>\n        <th>\n          <label style={{\"width\" : \"25%\"}} htmlFor=\"dwClass\">CLASS</label>\n        </th>\n        <td style={{\"width\" : \"25%\"}}>\n          <select\n            tabIndex={-1}\n            value={character.dwClass || \"null\"}\n            name=\"dwClass\"\n            onChange={event => {\n              setCharacter(character => ({...character,dwClass: event.target.value}));\n              setCharacter(character => ({...character,alignment: \"null\"}))}}>\n            <option disabled value=\"null\" hidden />\n            {\n              dwClasses.map((data, key) => {\n                return (\n                <option value={data} key={key}>\n                  {data}\n                </option>);\n              })\n            }\n            </select>\n        </td>\n        <td style={{\"width\" : \"50%\"}}/>\n      </tr>\n      <tr>\n        <th>\n          <label htmlFor=\"race\">RACE</label>\n        </th>\n        <td>\n          <select\n            tabIndex={-1}\n            value={character.race || \"null\"}\n            name=\"race\"\n            onChange={event => setCharacter(character => ({...character,race: event.target.value}))}>\n            <option disabled value=\"null\" hidden />\n            {\n              races.map((data, key) => {\n                return (\n                <option value={data} key={key}>\n                  {data}\n                </option>);\n              })\n            }\n          </select>\n        </td>\n        <td>\n          <textarea className=\"grey\" name=\"raceAttributes\" readOnly=\"readOnly\" value={raceAttributes()}/>\n        </td>\n      </tr>\n      <tr>\n        <th>\n          <label htmlFor=\"alignment\">ALIGNMENT</label>\n        </th>\n        <td>\n          <select\n            tabIndex={-1}\n            value={character.alignment || \"null\"}\n            name=\"alignment\"\n            onChange={event => setCharacter(character => ({...character,alignment: event.target.value}))}>\n            <option disabled value=\"null\" hidden />\n            {\n              character.dwClass && dwc && alignments.[dwc].map((data, key) => {\n              return (\n              <option value={data} key={key}>\n                {data}\n              </option>);})\n            }\n          </select>\n        </td>\n        <td>\n          <textarea className=\"grey\" name=\"alignmentAttribute\" readOnly=\"readOnly\" value={alignmentAttributes()}/>\n        </td>\n      </tr>\n    </tbody>\n  </table>);\n}\n\nexport default CharacterTypeTable;\n","import React, {useContext} from 'react';\nimport CharacterState from 'components/contexts/CharacterState';\nimport {classDetails} from 'data/classDetails';\n\nfunction CharacterDamage() {\n\n  // State Variables\n  const [character] = useContext(CharacterState);\n  const dwc = character.dwClass;\n\n  const damage = () => {\n    if (character.dwClass) {\n      return (classDetails.[dwc].damage);\n    } else {\n      return ('');\n    }\n  };\n\n  return (\n    <table id=\"damage\">\n      <thead>\n        <tr>\n          <th>\n            <label htmlFor=\"damage\">DAMAGE</label>\n          </th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr>\n          <td>\n            <input type=\"text\" className=\"shortfield grey\" name=\"damage\" readOnly=\"readOnly\" value={damage()}/>\n          </td>\n        </tr>\n      </tbody>\n    </table>\n  );\n}\nexport default CharacterDamage;\n","import React, {useContext} from 'react';\nimport CharacterState from 'components/contexts/CharacterState';\n\nfunction CharacterArmour() {\n\n  // State Variables\n  const [character, setCharacter] = useContext(CharacterState);\n\n  return (\n    <table id=\"armour\">\n      <thead>\n        <tr>\n          <th>\n            <label htmlFor=\"armour\">ARMOUR</label>\n          </th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr>\n          <td>\n            <input type=\"number\" min={0} className=\"shortfield\" name=\"armour\" value={character.armour || ''} onChange={event => setCharacter(character => ({...character,armour: event.target.value}))}/>\n          </td>\n        </tr>\n      </tbody>\n    </table>\n  );\n}\n\nexport default CharacterArmour;\n","import React, {useContext} from 'react';\nimport CharacterState from 'components/contexts/CharacterState';\n\nfunction CharacterFunds() {\n\n  // State Variables\n  const [character, setCharacter] = useContext(CharacterState);\n\n  return (\n    <table id=\"funds\">\n      <thead>\n        <tr>\n          <th>\n            <label htmlFor=\"funds\">FUNDS</label>\n          </th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr>\n          <td>\n            <input type=\"number\" className=\"shortfield\" name=\"funds\"\n              min={0} id=\"funds\" value={character.funds || ''} onChange={event => setCharacter(character => ({...character,funds: event.target.value}))}/>\n          </td>\n        </tr>\n      </tbody>\n    </table>\n  );\n}\n\nexport default CharacterFunds;\n","import React, {useContext} from 'react';\nimport CharacterState from 'components/contexts/CharacterState';\nimport {classDetails} from 'data/classDetails';\n\nfunction CharacterHP() {\n\n  // State Variables\n  const [character, setCharacter] = useContext(CharacterState);\n\n  const dwc = character.dwClass;\n  const maxHp = () => {\n    if (character.dwClass && character.abilities) {\n      return (\"/ \" + (classDetails.[dwc].baseHp + parseInt(character.abilities.find(x => x.category === 'CON').score ,10)));\n    } else {\n      return ('');\n    }\n  };\n\n  return (\n    <table id=\"hp\">\n      <thead>\n        <tr>\n          <th colSpan={2}>\n            <label htmlFor=\"hp\">HP</label>\n          </th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr>\n          <td>\n            <input type=\"number\" min={0} className=\"shortfield\" name=\"hp\" value={character.hp || ''} onChange={event => setCharacter(character => ({...character,hp: event.target.value}))}/>\n          </td>\n          <td>\n            <input type=\"text\" className=\"shortfield grey\" name=\"maxHp\" readOnly=\"readOnly\" value={maxHp()} />\n          </td>\n        </tr>\n      </tbody>\n    </table>\n  );\n}\n\nexport default CharacterHP;\n","import React, {useContext} from 'react';\nimport CharacterState from 'components/contexts/CharacterState';\n\nfunction CharacterLevel() {\n\n  // State Variables\n  const [character, setCharacter] = useContext(CharacterState);\n\n  return (\n    <table>\n      <thead>\n        <tr>\n          <th colSpan={2}>\n            <label htmlFor=\"level\">LEVEL</label>\n          </th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr>\n          <td>\n            <input type=\"number\" min={1} className=\"shortfield\" name=\"level\" value={character.level || ''} onChange={event => setCharacter(character => ({...character,level: event.target.value}))}/>\n          </td>\n        </tr>\n      </tbody>\n    </table>);\n}\n\nexport default CharacterLevel;\n","import React, {useContext} from 'react';\nimport CharacterState from 'components/contexts/CharacterState';\n\nfunction CharacterXP() {\n\n  // State Variables\n  const [character, setCharacter] = useContext(CharacterState);\n\n  // Total Load\n  const calcMaxXp = () => {\n    if (character.level) {\n      return (\"/ \" + (parseInt(character.level,10) + 7));\n    } else {\n      return ('');\n    }\n  };\n\n  return (\n    <table>\n      <thead>\n        <tr>\n          <th colSpan={2}>\n            <label htmlFor=\"xp\">XP</label>\n          </th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr>\n          <td>\n            <input type=\"number\" min={0} className=\"shortfield\" name=\"xp\" value={character.xp || ''} onChange={event => setCharacter(character => ({...character,xp: event.target.value}))}/>\n          </td>\n          <td>\n            <input type=\"text\" className=\"shortfield grey\" name=\"maxXp\" readOnly=\"readOnly\" value={calcMaxXp()} />\n          </td>\n        </tr>\n      </tbody>\n    </table>);\n}\n\nexport default CharacterXP;\n","import React from 'react';\nimport CharacterDamage from 'components/character/CharacterDamage'\nimport CharacterArmour from 'components/character/CharacterArmour'\nimport CharacterFunds from 'components/character/CharacterFunds'\nimport CharacterHP from 'components/character/CharacterHP'\nimport CharacterLevel from 'components/character/CharacterLevel'\nimport CharacterXP from 'components/character/CharacterXP'\n\nfunction CharacterBasicAttributesTable() {\n\n  return (\n  <div className='myForm'>\n    <div><CharacterLevel/></div>\n    <div><CharacterXP/></div>\n    <div><CharacterDamage/></div>\n    <div><CharacterArmour/></div>\n    <div><CharacterFunds/></div>\n    <div><CharacterHP/></div>\n  </div>);\n}\n\nexport default CharacterBasicAttributesTable;\n","import React, {useContext} from 'react';\nimport CharacterState from 'components/contexts/CharacterState';\nimport {abilityAfflictions} from 'data/abilityAfflictions';\n\nfunction CharacterAbilitiesTable() {\n\n  // State Variables\n  const [character, setCharacter] = useContext(CharacterState);\n\n  const updateAbilityScore = index => e => {\n    let newAbilities = [...character.abilities]; // copying the old array\n    newAbilities[index] = {...character.abilities[index], score: e.target.value}; // replace value\n    setCharacter(character => ({...character, abilities: newAbilities})); // set array back\n  }\n\n  const updateAbilityAffliction = index => e => {\n    let newAbilities = [...character.abilities]; // copying the old array\n    newAbilities[index] = {...character.abilities[index], affliction: e.target.value}; // replace value\n    setCharacter(character => ({...character, abilities: newAbilities})); // set array back\n  }\n\n  const abilityModifier = (abilityScore, abilityAffliction) => {\n\n    if (abilityScore && abilityAffliction) {\n    let baseModifier;\n    let afflicted;\n\n    abilityScore = parseInt(abilityScore,10);\n\n    if ([1, 2, 3].indexOf(abilityScore) > -1) {\n      baseModifier = -3;\n    } else if ([4, 5].indexOf(abilityScore) > -1) {\n      baseModifier = -2;\n    } else if ([6, 7, 8].indexOf(abilityScore) > -1) {\n      baseModifier = -1;\n    } else if ([9, 10, 11, 12].indexOf(abilityScore) > -1) {\n      baseModifier = 0;\n    } else if ([13, 14, 15].indexOf(abilityScore) > -1) {\n      baseModifier = 1;\n    } else if ([16, 17].indexOf(abilityScore) > -1) {\n      baseModifier = 2;\n    } else if (abilityScore === 18) {\n      baseModifier = 3;\n    }\n\n    /*-1 if afflicted*/\n    if (abilityAffliction === \"Unafflicted\") {\n      afflicted = 0;\n    } else {\n      afflicted = 1;\n    }\n\n    let modifier = (baseModifier - afflicted);\n\n    if (modifier > 0) {\n      return(\"[+\" + modifier+ \"]\");\n    } else {\n      return (\"[\" + modifier + \"]\");\n    }\n  } else {\n    return ('')\n  }\n  }\n\n  return (\n     <table style={{\"width\":\"100%\"}} id=\"abilitiesTable\">\n       <thead>\n         <tr>\n           {\n            character.abilities && character.abilities.map((abilities, index) => {\n            return (\n              <th key={index}>\n                <label\n                  htmlFor={abilities.category}\n                  value={abilities.category}\n                  name={abilities.category}>\n                  {abilities.category}\n                </label>\n              </th>)\n           })\n         }\n         </tr>\n       </thead>\n       <tbody>\n         <tr>\n           {\n            character.abilities && character.abilities.map((abilities, index) => {\n            return (\n              <td key={index}>\n                <input\n                  type=\"number\"\n                  min={1} max={18}\n                  className=\"ability\"\n                  name={abilities.category + \"Score\"}\n                  value={abilities.score}\n                  onChange={updateAbilityScore(index)} />\n            </td>)\n           })\n         }\n         </tr>\n         <tr>\n           {\n            character.abilities && character.abilities.map((abilities, index) => {\n            return (\n              <td key={index}>\n                <input\n                  type=\"text\"\n                  className=\"grey tallfield\"\n                  name={abilities.category + \"Modifier\"}\n                  value={abilityModifier(abilities.score, abilities.affliction)}\n                  readOnly />\n            </td>)\n           })\n         }\n         </tr>\n         <tr>\n           {\n            character.abilities && character.abilities.map((abilities,index) => {\n            const ab = abilities.category;\n            return (\n              <td key={index}>\n                <select\n                  tabIndex={-1}\n                  className=\"abilityAffliction\"\n                  value={abilities.affliction || \"null\"}\n                  name={abilities.category + \"Affliction\"}\n                  onChange={updateAbilityAffliction(index)}>\n                  <option disabled value=\"null\" hidden />\n                    {\n                      abilityAfflictions.[ab].map((data, key) => {\n                        return (\n                        <option value={data} key={key}>\n                          {data}\n                        </option>);\n                      })\n                    }\n                </select>\n              </td>)\n           })\n         }\n         </tr>\n       </tbody>\n     </table>\n    );\n}\n\nexport default CharacterAbilitiesTable;\n","import React, {useContext} from 'react';\nimport CharacterState from 'components/contexts/CharacterState';\n\nfunction CharacterBondsTable() {\n\n  // State Variables\n  const [character, setCharacter] = useContext(CharacterState);\n\n  // State manipulation\n  const updateBond = index => e => {\n    let newBonds = [...character.bonds]; // copying the old array\n    newBonds[index] = {...character.bonds[index], bond: e.target.value}; // replace value\n    setCharacter(character => ({...character, bonds: newBonds})); // set array back\n  }\n\n  // Delete rows in the table\n  const deleteBondRow = index => {\n    const newBonds = [...character.bonds]; // copying the old array\n    if (character.bonds.length !== 1) { //don't delete last row\n      newBonds.splice(index, 1); // remove item from array\n      setCharacter(character => ({...character, bonds: newBonds})); // set array back\n    } else {\n      alert('Cannot delete final row');\n    }\n  }\n\n  // Add rows in the table\n  const addBondsRow = () => {\n    const newBonds = [...character.bonds, {bond: \"\"}]; // copying the old array and adding blank item\n    setCharacter(character => ({...character, bonds: newBonds})); // set array back\n  }\n\n  return (\n    <table style={{\"width\" : \"100%\"}} id=\"bondsTable\">\n      <thead>\n        <tr>\n          <th style={{\"width\" : \"100%\"}}>\n            <label>BONDS</label>\n          </th>\n          <td>\n            <button\n              type=\"button\"\n              className=\"addRow\"\n              onClick={() => addBondsRow()}>\n              +\n            </button>\n          </td>\n        </tr>\n      </thead>\n      <tbody>\n        {\n         character.bonds && character.bonds.map((bonds,index) => {\n         return (\n           <tr key={index}>\n               <td>\n                 <textarea\n                   placeholder=\"Add 2-3 bonds here\"\n                   value={bonds.bond}\n                   name={\"bond\" + index}\n                   onChange={updateBond(index)}\n                   />\n               </td>\n               <td>\n                 <button\n                   type=\"button\"\n                   className=\"deleteRow\"\n                   onClick={() => deleteBondRow(index)}/>\n               </td>\n           </tr>)\n        })\n      }\n      </tbody>\n      <tfoot/>\n    </table>\n    );\n}\n\nexport default CharacterBondsTable;\n","import React, {useContext} from 'react';\nimport CharacterState from 'components/contexts/CharacterState';\nimport {classDetails} from 'data/classDetails';\n\nfunction CharacterItemsTable() {\n\n  // State Variables\n  const [character, setCharacter] = useContext(CharacterState);\n  const dwc = character.dwClass;\n\n  // Total Load\n  const totalLoad = () => {\n    if (character.items) {\n      return (character.items.reduce((totalLoad,data) => totalLoad + parseInt((data.weight || 0),10) ,0));\n    } else {\n      return ('');\n    }\n  };\n\n  // Max Load\n  const maxLoad = () => {\n\n    if (character.dwClass && character.abilities.find(x => x.category === 'STR').score && character.abilities.find(x => x.category === 'STR').affliction) {\n      let str = character.abilities.find(x => x.category === 'STR');\n      let baseModifier;\n      let abilityAffliction = str.affliction;\n      let abilityScore = parseInt(str.score,10);\n      let afflicted;\n\n      if ([1, 2, 3].indexOf(abilityScore) > -1) {\n        baseModifier = -3;\n      } else if ([4, 5].indexOf(abilityScore) > -1) {\n        baseModifier = -2;\n      } else if ([6, 7, 8].indexOf(abilityScore) > -1) {\n        baseModifier = -1;\n      } else if ([9, 10, 11, 12].indexOf(abilityScore) > -1) {\n        baseModifier = 0;\n      } else if ([13, 14, 15].indexOf(abilityScore) > -1) {\n        baseModifier = 1;\n      } else if ([16, 17].indexOf(abilityScore) > -1) {\n        baseModifier = 2;\n      } else if (abilityScore === 18) {\n        baseModifier = 3;\n      }\n\n      /*-1 if afflicted*/\n      if (abilityAffliction === \"Unafflicted\") {\n        afflicted = 0;\n      } else {\n        afflicted = 1;\n      }\n\n      let modifier = (baseModifier - afflicted);\n\n      return (\"/ \" + (classDetails.[dwc].baseLoad + modifier));\n    } else {\n      return ('');\n    }\n  };\n\n  // State manipulation\n  const updateItem = index => e => {\n    let newItems = [...character.items]; // copying the old array\n    newItems[index] = {...character.items[index], item: e.target.value}; // replace value\n    setCharacter(character => ({...character, items: newItems})); // set array back\n  }\n\n  const updateItemWeight = index => e => {\n    let newItems = [...character.items]; // copying the old array\n    newItems[index] = {...character.items[index], weight: e.target.value}; // replace value\n    setCharacter(character => ({...character, items: newItems})); // set array back\n  }\n\n  // Delete rows in the table\n  const deleteItemRow = index => {\n    const newItems = [...character.items]; // copying the old array\n    if (character.items.length !== 1) { //don't delete last row\n      newItems.splice(index, 1); // remove item from array\n      setCharacter(character => ({...character, items: newItems})); // set array back\n    } else {\n      alert('Cannot delete final row');\n    }\n  }\n\n  // Add rows in the table\n  const addItemRow = () => {\n    const newItems = [...character.items, {item: \"\", weight: \"\"}]; // copying the old array and adding blank item\n    setCharacter(character => ({...character, items: newItems})); // set array back\n  }\n  //,\n\n  return (\n    <table style={{\"width\":\"100%\"}} id=\"itemsTable\">\n      <thead>\n        <tr>\n          <th colSpan={4}><label>GEAR</label></th>\n        </tr>\n        <tr>\n          <th style={{\"width\":\"100%\"}}><label>ITEM</label></th>\n          <th colSpan={2}><label>WEIGHT</label></th>\n          <td>\n            <button\n              type=\"button\"\n              className=\"addRow\"\n              onClick={() => addItemRow()}>\n              +\n            </button>\n          </td>\n        </tr>\n      </thead>\n      <tbody>\n        {\n         character.items && character.items.map((items,index) => {\n         return (\n           <tr key={index}>\n               <td>\n                 <textarea\n                   placeholder=\"Add any items and descriptions here\"\n                   value={items.item}\n                   name={\"item\" + index}\n                   onChange={updateItem(index)}/>\n               </td>\n               <td colSpan={2}>\n                 <input\n                   type=\"number\"\n                   min={0}\n                   value={items.weight}\n                   name={\"itemWeight\" + index}\n                   onChange={updateItemWeight(index)}/>\n               </td>\n               <td>\n                 <button\n                   type=\"button\"\n                   className=\"deleteRow\"\n                   onClick={() => deleteItemRow(index)}/>\n               </td>\n           </tr>)\n        })\n      }\n      </tbody>\n      <tfoot>\n        <tr>\n          <th><label htmlFor=\"load\">LOAD</label></th>\n          <td>\n            <input type=\"number\" className=\"shortfield grey\" name=\"totalLoad\" readOnly value={totalLoad()} />\n          </td>\n          <td>\n            <input type=\"text\" className=\"shortfield grey\" name=\"maxLoad\" readOnly=\"readOnly\" value={maxLoad()} />\n          </td>\n          <td />\n        </tr>\n      </tfoot>\n    </table>\n    );\n}\n\nexport default CharacterItemsTable;\n","import React, {useContext} from 'react';\nimport CharacterState from 'components/contexts/CharacterState';\n\nfunction CharacterClassFeaturesTable() {\n\n  // State Variables\n  const [character, setCharacter] = useContext(CharacterState);\n\n  // State manipulation\n  const updateFeatureCheckbox = index => e => {\n    let newFeatures = [...character.classFeatures]; // copying the old array\n    newFeatures[index] = {...character.classFeatures[index], checkbox: e.target.checked}; // replace value\n    setCharacter(character => ({...character, classFeatures: newFeatures})); // set array back\n  }\n\n  const updateFeature = index => e => {\n    let newFeatures = [...character.classFeatures]; // copying the old array\n    newFeatures[index] = {...character.classFeatures[index], feature: e.target.value}; // replace value\n    setCharacter(character => ({...character, classFeatures: newFeatures})); // set array back\n  }\n\n  // Delete rows in the table\n  const deleteFeatureRow = index => {\n    const newFeatures = [...character.classFeatures]; // copying the old array\n    if (character.classFeatures.length !== 1) { //don't delete last row\n      newFeatures.splice(index, 1); // remove item from array\n      setCharacter(character => ({...character, classFeatures: newFeatures})); // set array back\n    } else {\n      alert('Cannot delete final row');\n    }\n  }\n\n  // Add rows in the table\n  const addFeatureRow = () => {\n    const newFeatures = [...character.classFeatures, {feature: \"\", checkbox: false}]; // copying the old array and adding blank item\n    setCharacter(character => ({...character, classFeatures: newFeatures})); // set array back\n  }\n\n  return (\n    <table style={{\n        \"width\" : \"100%\"\n      }} id=\"classFeaturesTable\">\n      <thead>\n        <tr>\n          <th colSpan={2} style={{\n              \"width\" : \"100%\"\n            }}>\n            <label>CLASS FEATURES</label>\n          </th>\n          <td>\n            <button\n              type=\"button\"\n              className=\"addRow\"\n              onClick={() => addFeatureRow()}>\n              +\n            </button>\n          </td>\n        </tr>\n      </thead>\n      <tbody>\n          {\n           character.classFeatures && character.classFeatures.map((classFeatures,index) => {\n           return (\n             <tr key={index}>\n               <td>\n                 <input\n                   type=\"checkbox\"\n                   className=\"checkbox\"\n                   name={\"classFeatureCheckbox\" + index}\n                   checked={!!classFeatures.checkbox}\n                   onChange={updateFeatureCheckbox(index)}/>\n               </td>\n                 <td>\n                   <textarea\n                     placeholder=\"Add any Class Features here (e.g. Spell Lists, Poison Recipes, Druid Balance, Paladin Quests or anything else!)\"\n                     value={classFeatures.feature}\n                     name={\"classFeature\" + index}\n                     onChange={updateFeature(index)}/>\n                 </td>\n                 <td>\n                   <button\n                     type=\"button\"\n                     className=\"deleteRow\"\n                     onClick={() => deleteFeatureRow(index)}/>\n                 </td>\n             </tr>)\n          })\n        }\n      </tbody>\n      <tfoot/>\n    </table>\n    );\n}\n\nexport default CharacterClassFeaturesTable;\n","import React, {useState, useEffect, useCallback} from 'react';\nimport CharacterState from 'components/contexts/CharacterState';\nimport { useParams } from \"react-router\";\nimport * as FirebaseService from 'services/firebase';\nimport CharacterSheetHeader from 'components/character/CharacterSheetHeader'\nimport CharacterDetailsTable from 'components/character/CharacterDetailsTable'\nimport CharacterTypeTable from 'components/character/CharacterTypeTable'\nimport CharacterBasicAttributesTable from 'components/character/CharacterBasicAttributesTable'\nimport CharacterAbilitiesTable from 'components/character/CharacterAbilitiesTable'\nimport CharacterBondsTable from 'components/character/CharacterBondsTable'\nimport CharacterItemsTable from 'components/character/CharacterItemsTable'\nimport CharacterClassFeaturesTable from 'components/character/CharacterClassFeaturesTable'\n\n// Debounce function\nconst debounce = (callback,delay) => {\n  let timer;\n  return (...args) => {\n    clearTimeout(timer);\n    timer = setTimeout(() => callback(...args),delay);\n  }\n}\n\nfunction CharacterSheet() {\n\n  // Definitions for state\n  const [character, setCharacter] = useState({});\n  const [isSaving, setIsSaving] = useState(false);\n\n  // retrieve URL parameters for usage\n  const { campaignURL, characterURL } = useParams();\n\n  // Use an effect hook to subscribe to the character stream and\n  // automatically unsubscribe when the component unmounts.\n  useEffect(() => {\n    if (campaignURL && characterURL) {\n      const unsubscribe = FirebaseService.streamCharacter(campaignURL, characterURL, {\n          next: documentSnapshot => {\n              setCharacter(documentSnapshot.data());\n          },\n          error: (error) => {\n            alert(\"Failed to load character data correctly, see console error\");\n            console.error(\"Error loading document:\", error);\n          }\n      });\n      return unsubscribe;\n    }\n  }, [campaignURL, characterURL, setCharacter]);\n\n  // Saving character\n  const debouncedSave = useCallback(\n    debounce(character =>\n      FirebaseService.saveCharacter(campaignURL, characterURL, character)\n        .then(() => {\n          setIsSaving(false);\n          console.info('Saved Character:', character );\n        })\n        .catch((error) => {\n          alert(\"Failed to save character data correctly, see console error\");\n          console.error(\"Error saving document:\", error);\n          //If saving fails then it will not retry until the error is rectified\n        })\n    , process.env.DEBOUNCE_SAVE_DELAY_MS),[]);\n\n  useEffect(\n    () => {\n      if (character && Object.keys(character).length >= 1) {\n        setIsSaving(true);\n        debouncedSave(character);\n      }\n    }, [character] //Only trigger effect on change of character\n  );\n\n  console.info(\"CharacterState:\",character);\n  console.info(\"isSaving\",isSaving);\n\n  return (\n  <CharacterState.Provider value={[character, setCharacter]}>\n    <CharacterSheetHeader/>\n    <br/>\n    <CharacterDetailsTable/>\n    <br/>\n    <CharacterTypeTable/>\n    <br/>\n    <CharacterBasicAttributesTable/>\n    <br/>\n    <CharacterAbilitiesTable/>\n    <br/>\n    <CharacterBondsTable/>\n    <br/>\n    <CharacterItemsTable/>\n    <br/>\n    <CharacterClassFeaturesTable/>\n    <br/>\n  </CharacterState.Provider>);\n}\n\nexport default CharacterSheet;\n","import React from 'react';\n\nconst CampaignState = React.createContext([{}, () => {}]);\n\nexport default CampaignState;\n","import React from 'react';\nimport {Link} from 'react-router-dom';\nimport {useParams} from 'react-router';\n\nfunction CampaignSheetHeader() {\n\n  // retrieve URL parameters for usage\n  const {campaignURL} = useParams();\n\n  return (<div>\n    <Link to=\"/dw-react\">Home</Link> >\n    <p>{campaignURL}</p>\n    <h1>{campaignURL}\n    </h1>\n  </div>);\n}\n\nexport default CampaignSheetHeader;\n","import React, {useState} from 'react';\nimport {useParams} from 'react-router';\nimport * as FirebaseService from 'services/firebase';\n\nfunction CreateCharacter() {\n\n  const [charaName, setCharaName] = useState(\"\");\n  const {campaignURL} = useParams();\n\n  // Create New Character\n  const saveCharacter = () => {\n    if (campaignURL && charaName) { //don't save unless details present\n      FirebaseService.createCharacter(campaignURL,charaName)\n      .then(() => {\n        console.info('Created Character:', charaName);\n      })\n      .catch((error) => {\n        alert(\"Failed to create character, see console error\");\n        console.error(\"Error creating document:\", error);\n      });\n    } else {\n      alert('Cannot save blank character');\n    }\n  }\n\n  return (\n  <>\n  <table style={{\"width\" : \"100%\"}} id=\"basicInfoTable\">\n    <tbody>\n      <tr>\n        <th style={{\"width\" : \"25%\"}}>\n          <label htmlFor=\"shortName\">SHORT NAME</label>\n        </th>\n        <td>\n          <textarea placeholder=\"Add your characters short name here, you wont be able to change this one saved\" name=\"shortName\" onChange={event => setCharaName(event.target.value)}/>\n        </td>\n      </tr>\n    </tbody>\n  </table>\n  <button onClick={() => saveCharacter()}>Save Character</button>\n  </>\n);\n}\n\nexport default CreateCharacter;\n","import React, {useContext,useState} from 'react';\nimport {Link} from 'react-router-dom';\nimport {useParams} from 'react-router';\nimport * as FirebaseService from 'services/firebase';\nimport CampaignState from 'components/contexts/CampaignState';\nimport CreateCharacter from 'components/campaign/CreateCharacter';\n\nfunction CampaignDetails() {\n\n  // State Variables\n  const [campaign] = useContext(CampaignState);\n  const [show, setShow] = useState(false);\n  // retrieve URL parameters for usage\n  const {campaignURL} = useParams();\n\n  const deleteCharacter = (campaign,character) => {\n    if (campaign && character) { //don't save unless details present\n      FirebaseService.deleteCharacter(campaign,character)\n      .then(() => {\n        console.info('Deleted Character:', character);\n      })\n      .catch((error) => {\n        alert(\"Failed to delete character, see console error\");\n        console.error(\"Error deleting document:\", error);\n      });\n    } else {\n      alert('Cannot delete blank character');\n    }\n  }\n\n  return (\n    <div>\n    <table>\n      <thead>\n        <tr>\n          <th colSpan=\"4\">CHARACTERS</th>\n          <th><button onClick={() => setShow(true)}>+</button></th>\n        </tr>\n      </thead>\n      <tbody>\n        {\n          campaign.campaign && campaign.campaign.map((campaign, index) => {\n            return (\n            <tr key={index}>\n              <td><Link to={\"/dw-react/\" + campaignURL + \"/\" + campaign.character}>{campaign.character}</Link></td>\n              <td>({campaign.characterData.owner})</td>\n              <td>HP: {campaign.characterData.hp}</td>\n              <td>XP: {campaign.characterData.xp}</td>\n                <td>\n                  <button onClick={() => deleteCharacter(campaignURL, campaign.character)}>Delete</button>\n                </td>\n            </tr>)\n          })\n        }\n      </tbody>\n    </table>\n      {show\n        ? <CreateCharacter/>\n        : null\n      }\n    </div>\n  );\n}\n\nexport default CampaignDetails;\n","import React, {useState, useEffect} from 'react';\nimport {useParams} from 'react-router';\nimport * as FirebaseService from 'services/firebase';\nimport CampaignState from 'components/contexts/CampaignState';\nimport CampaignSheetHeader from 'components/campaign/CampaignSheetHeader';\nimport CampaignDetails from 'components/campaign/CampaignDetails';\n\nfunction CampaignSheet() {\n\n  // Definitions for state\n  const [campaign, setCampaign] = useState({});\n\n  // retrieve URL parameters for usage\n  const {campaignURL} = useParams();\n\n  // Use an effect hook to subscribe to the campaign stream and\n  // automatically unsubscribe when the component unmounts.\n  useEffect(() => {\n    if (campaignURL) {\n      const unsubscribe = FirebaseService.streamCharacters(campaignURL, {\n        next: querySnapshot => {\n          //const updatedCharacterList = querySnapshot.docs.map((docSnapshot) => { return(docSnapshot.data())});\n          const updatedCharacterList = querySnapshot.docs.map((docSnapshot) => { return({character: docSnapshot.id , characterData: docSnapshot.data()})});\n          setCampaign(campaign => ({campaign: updatedCharacterList}));\n        },\n        error: (error) => {\n          alert(\"Failed to load campaign data correctly, see console error\");\n          console.error(\"Error loading document:\", error);\n        }\n      });\n      return unsubscribe;\n    }\n  }, [campaignURL, setCampaign]);\n\n  console.info(\"Campaign State:\", campaign);\n\n  return (\n  <CampaignState.Provider value={[campaign, setCampaign]}>\n    <CampaignSheetHeader />\n    <br/>\n    <CampaignDetails/>\n  </CampaignState.Provider>);\n}\n\nexport default CampaignSheet;\n","import React from 'react';\nimport {BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport ErrorPage from 'components/ErrorPage'\nimport Homepage from 'components/Homepage';\nimport NavSidebar from 'components/NavSidebar';\nimport UserProfile from 'components/profile/UserProfile';\nimport AppHeader from 'components/AppHeader';\nimport CharacterSheet from 'components/character/CharacterSheet';\nimport CampaignSheet from 'components/campaign/CampaignSheet';\n\nfunction App(props) {\n  const currentUser = props.currentUser;\n\n  return (<>\n    <UserProfile currentUser={currentUser}/>\n    <Router>\n      <AppHeader/>\n      <NavSidebar/>\n      <Switch>\n        <Route exact path=\"/dw-react/:campaignURL/:characterURL\" component={CharacterSheet} />\n        <Route exact path=\"/dw-react/:campaignURL\" component={CampaignSheet} />\n        <Route exact path=\"/dw-react\" component={Homepage} />\n        <Route component={ErrorPage} />\n      </Switch>\n    </Router>\n  </>)\n}\n\nexport default App;\n","import React from 'react';\n\nconst AuthState = React.createContext(null);\n\nexport default AuthState;\n","import React, {useState, useEffect} from 'react';\nimport ReactDOM from 'react-dom';\nimport 'index.css';\nimport 'custom.css';\nimport App from 'components/App';\nimport * as FirebaseService from 'services/firebase';\nimport AuthState from 'components/contexts/AuthState';\n\nfunction Index() {\n\n  const [currentUser, setCurrentUser] = useState(null);\n\n  useEffect(() => {\n    const unsubscribe = FirebaseService.auth.onAuthStateChanged(user => {\n      setCurrentUser(user)\n    });\n    return unsubscribe;\n  }, [])\n\n  return (<AuthState.Provider value={[currentUser]}>\n    {\n      currentUser\n        ? (<div>\n          <App currentUser={currentUser}/>\n          <button onClick={() => FirebaseService.auth.signOut()}>LOG OUT</button>\n        </div>)\n        : <button onClick={FirebaseService.SignInWithGoogle}>SIGN IN WITH GOOGLE</button>\n    }\n  </AuthState.Provider>);\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<Index/>, rootElement);\n"],"sourceRoot":""}